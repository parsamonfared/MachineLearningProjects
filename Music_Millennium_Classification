{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "p1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dc_em_lbTR4T",
        "colab_type": "text"
      },
      "source": [
        "google colab link:\n",
        "https://colab.research.google.com/drive/1vXn6Ko4fFNXR8h2HGJXCMtTitJJkUT8N"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ssSchW4ioffi",
        "colab_type": "text"
      },
      "source": [
        "# CSC321H5 Project 1. Music Millenium Classification\n",
        "\n",
        "**Deadline**: Thursday, Jan. 30, by 9pm\n",
        "\n",
        "**Submission**: Submit a PDF export of the completed notebook. \n",
        "\n",
        "**Late Submission**: Please see the syllabus for the late submission criteria.\n",
        "\n",
        "To celebrate the start of a new decade, we will build models to predict which\n",
        "**century** a piece of music was released.  We will be using the \"YearPredictionMSD Data Set\"\n",
        "based on the Million Song Dataset. The data is available to download from the UCI \n",
        "Machine Learning Repository. Here are some links about the data:\n",
        "\n",
        "- https://archive.ics.uci.edu/ml/datasets/yearpredictionmsd\n",
        "- http://millionsongdataset.com/pages/tasks-demos/#yearrecognition\n",
        "\n",
        "## Question 1. Data\n",
        "\n",
        "Start by setting up a Google Colab notebook in which to do your work.\n",
        "If you are working with a partner, you might find this link helpful:\n",
        "\n",
        "- https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb\n",
        "\n",
        "The recommended way to work together is pair coding, where you and your partner are sitting together and writing code together."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qQ71MuVToffk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "htF3wbY4offp",
        "colab_type": "text"
      },
      "source": [
        "Now that your notebook is set up, we can load the data into the notebook. The code below provides\n",
        "two ways of loading the data: directly from the internet, or through mounting Google Drive.\n",
        "The first method is easier but slower, and the second method is a bit involved at first, but\n",
        "can save you time later on. You will need to mount Google Drive for later assignments, so we recommend\n",
        "figuring how to do that now.\n",
        "\n",
        "Here are some resources to help you get started:\n",
        "\n",
        "- http.://colab.research.google.com/notebooks/io.ipynb"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JiXB-wngoffq",
        "colab_type": "code",
        "outputId": "0d97c2ba-ee71-4327-c035-1bea83c9c63f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "load_from_drive = True\n",
        "\n",
        "if not load_from_drive:\n",
        "  csv_path = \"http://archive.ics.uci.edu/ml/machine-learning-databases/00203/YearPredictionMSD.txt.zip\"\n",
        "else:\n",
        "  from google.colab import drive\n",
        "\n",
        "  drive.mount('/content/gdrive', force_remount=True)\n",
        "  csv_path = '/content/gdrive/My Drive/YearPredictionMSD.txt' # TODO - UPDATE ME!\n",
        "\n",
        "t_label = [\"year\"]\n",
        "x_labels = [\"var%d\" % i for i in range(1, 91)]\n",
        "df = pandas.read_csv(csv_path, names=t_label + x_labels)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T1XKOEa6offt",
        "colab_type": "text"
      },
      "source": [
        "Now that the data is loaded to your Colab notebook, you should be able to display the Pandas\n",
        "DataFrame `df` as a table:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zhRnABFKoffu",
        "colab_type": "code",
        "outputId": "10a4f2d4-9d49-4a80-926c-e42a94d49e0c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        }
      },
      "source": [
        "df"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>var1</th>\n",
              "      <th>var2</th>\n",
              "      <th>var3</th>\n",
              "      <th>var4</th>\n",
              "      <th>var5</th>\n",
              "      <th>var6</th>\n",
              "      <th>var7</th>\n",
              "      <th>var8</th>\n",
              "      <th>var9</th>\n",
              "      <th>var10</th>\n",
              "      <th>var11</th>\n",
              "      <th>var12</th>\n",
              "      <th>var13</th>\n",
              "      <th>var14</th>\n",
              "      <th>var15</th>\n",
              "      <th>var16</th>\n",
              "      <th>var17</th>\n",
              "      <th>var18</th>\n",
              "      <th>var19</th>\n",
              "      <th>var20</th>\n",
              "      <th>var21</th>\n",
              "      <th>var22</th>\n",
              "      <th>var23</th>\n",
              "      <th>var24</th>\n",
              "      <th>var25</th>\n",
              "      <th>var26</th>\n",
              "      <th>var27</th>\n",
              "      <th>var28</th>\n",
              "      <th>var29</th>\n",
              "      <th>var30</th>\n",
              "      <th>var31</th>\n",
              "      <th>var32</th>\n",
              "      <th>var33</th>\n",
              "      <th>var34</th>\n",
              "      <th>var35</th>\n",
              "      <th>var36</th>\n",
              "      <th>var37</th>\n",
              "      <th>var38</th>\n",
              "      <th>var39</th>\n",
              "      <th>...</th>\n",
              "      <th>var51</th>\n",
              "      <th>var52</th>\n",
              "      <th>var53</th>\n",
              "      <th>var54</th>\n",
              "      <th>var55</th>\n",
              "      <th>var56</th>\n",
              "      <th>var57</th>\n",
              "      <th>var58</th>\n",
              "      <th>var59</th>\n",
              "      <th>var60</th>\n",
              "      <th>var61</th>\n",
              "      <th>var62</th>\n",
              "      <th>var63</th>\n",
              "      <th>var64</th>\n",
              "      <th>var65</th>\n",
              "      <th>var66</th>\n",
              "      <th>var67</th>\n",
              "      <th>var68</th>\n",
              "      <th>var69</th>\n",
              "      <th>var70</th>\n",
              "      <th>var71</th>\n",
              "      <th>var72</th>\n",
              "      <th>var73</th>\n",
              "      <th>var74</th>\n",
              "      <th>var75</th>\n",
              "      <th>var76</th>\n",
              "      <th>var77</th>\n",
              "      <th>var78</th>\n",
              "      <th>var79</th>\n",
              "      <th>var80</th>\n",
              "      <th>var81</th>\n",
              "      <th>var82</th>\n",
              "      <th>var83</th>\n",
              "      <th>var84</th>\n",
              "      <th>var85</th>\n",
              "      <th>var86</th>\n",
              "      <th>var87</th>\n",
              "      <th>var88</th>\n",
              "      <th>var89</th>\n",
              "      <th>var90</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2001</td>\n",
              "      <td>49.94357</td>\n",
              "      <td>21.47114</td>\n",
              "      <td>73.07750</td>\n",
              "      <td>8.74861</td>\n",
              "      <td>-17.40628</td>\n",
              "      <td>-13.09905</td>\n",
              "      <td>-25.01202</td>\n",
              "      <td>-12.23257</td>\n",
              "      <td>7.83089</td>\n",
              "      <td>-2.46783</td>\n",
              "      <td>3.32136</td>\n",
              "      <td>-2.31521</td>\n",
              "      <td>10.20556</td>\n",
              "      <td>611.10913</td>\n",
              "      <td>951.08960</td>\n",
              "      <td>698.11428</td>\n",
              "      <td>408.98485</td>\n",
              "      <td>383.70912</td>\n",
              "      <td>326.51512</td>\n",
              "      <td>238.11327</td>\n",
              "      <td>251.42414</td>\n",
              "      <td>187.17351</td>\n",
              "      <td>100.42652</td>\n",
              "      <td>179.19498</td>\n",
              "      <td>-8.41558</td>\n",
              "      <td>-317.87038</td>\n",
              "      <td>95.86266</td>\n",
              "      <td>48.10259</td>\n",
              "      <td>-95.66303</td>\n",
              "      <td>-18.06215</td>\n",
              "      <td>1.96984</td>\n",
              "      <td>34.42438</td>\n",
              "      <td>11.72670</td>\n",
              "      <td>1.36790</td>\n",
              "      <td>7.79444</td>\n",
              "      <td>-0.36994</td>\n",
              "      <td>-133.67852</td>\n",
              "      <td>-83.26165</td>\n",
              "      <td>-37.29765</td>\n",
              "      <td>...</td>\n",
              "      <td>-25.38187</td>\n",
              "      <td>-3.90772</td>\n",
              "      <td>13.29258</td>\n",
              "      <td>41.55060</td>\n",
              "      <td>-7.26272</td>\n",
              "      <td>-21.00863</td>\n",
              "      <td>105.50848</td>\n",
              "      <td>64.29856</td>\n",
              "      <td>26.08481</td>\n",
              "      <td>-44.59110</td>\n",
              "      <td>-8.30657</td>\n",
              "      <td>7.93706</td>\n",
              "      <td>-10.73660</td>\n",
              "      <td>-95.44766</td>\n",
              "      <td>-82.03307</td>\n",
              "      <td>-35.59194</td>\n",
              "      <td>4.69525</td>\n",
              "      <td>70.95626</td>\n",
              "      <td>28.09139</td>\n",
              "      <td>6.02015</td>\n",
              "      <td>-37.13767</td>\n",
              "      <td>-41.12450</td>\n",
              "      <td>-8.40816</td>\n",
              "      <td>7.19877</td>\n",
              "      <td>-8.60176</td>\n",
              "      <td>-5.90857</td>\n",
              "      <td>-12.32437</td>\n",
              "      <td>14.68734</td>\n",
              "      <td>-54.32125</td>\n",
              "      <td>40.14786</td>\n",
              "      <td>13.01620</td>\n",
              "      <td>-54.40548</td>\n",
              "      <td>58.99367</td>\n",
              "      <td>15.37344</td>\n",
              "      <td>1.11144</td>\n",
              "      <td>-23.08793</td>\n",
              "      <td>68.40795</td>\n",
              "      <td>-1.82223</td>\n",
              "      <td>-27.46348</td>\n",
              "      <td>2.26327</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2001</td>\n",
              "      <td>48.73215</td>\n",
              "      <td>18.42930</td>\n",
              "      <td>70.32679</td>\n",
              "      <td>12.94636</td>\n",
              "      <td>-10.32437</td>\n",
              "      <td>-24.83777</td>\n",
              "      <td>8.76630</td>\n",
              "      <td>-0.92019</td>\n",
              "      <td>18.76548</td>\n",
              "      <td>4.59210</td>\n",
              "      <td>2.21920</td>\n",
              "      <td>0.34006</td>\n",
              "      <td>44.38997</td>\n",
              "      <td>2056.93836</td>\n",
              "      <td>605.40696</td>\n",
              "      <td>457.41175</td>\n",
              "      <td>777.15347</td>\n",
              "      <td>415.64880</td>\n",
              "      <td>746.47775</td>\n",
              "      <td>366.45320</td>\n",
              "      <td>317.82946</td>\n",
              "      <td>273.07917</td>\n",
              "      <td>141.75921</td>\n",
              "      <td>317.35269</td>\n",
              "      <td>19.48271</td>\n",
              "      <td>-65.25496</td>\n",
              "      <td>162.75145</td>\n",
              "      <td>135.00765</td>\n",
              "      <td>-96.28436</td>\n",
              "      <td>-86.87955</td>\n",
              "      <td>17.38087</td>\n",
              "      <td>45.90742</td>\n",
              "      <td>32.49908</td>\n",
              "      <td>-32.85429</td>\n",
              "      <td>45.10830</td>\n",
              "      <td>26.84939</td>\n",
              "      <td>-302.57328</td>\n",
              "      <td>-41.71932</td>\n",
              "      <td>-138.85034</td>\n",
              "      <td>...</td>\n",
              "      <td>28.55107</td>\n",
              "      <td>1.52298</td>\n",
              "      <td>70.99515</td>\n",
              "      <td>-43.63073</td>\n",
              "      <td>-42.55014</td>\n",
              "      <td>129.82848</td>\n",
              "      <td>79.95420</td>\n",
              "      <td>-87.14554</td>\n",
              "      <td>-45.75446</td>\n",
              "      <td>-65.82100</td>\n",
              "      <td>-43.90031</td>\n",
              "      <td>-19.45705</td>\n",
              "      <td>12.59163</td>\n",
              "      <td>-407.64130</td>\n",
              "      <td>42.91189</td>\n",
              "      <td>12.15850</td>\n",
              "      <td>-88.37882</td>\n",
              "      <td>42.25246</td>\n",
              "      <td>46.49209</td>\n",
              "      <td>-30.17747</td>\n",
              "      <td>45.98495</td>\n",
              "      <td>130.47892</td>\n",
              "      <td>13.88281</td>\n",
              "      <td>-4.00055</td>\n",
              "      <td>17.85965</td>\n",
              "      <td>-18.32138</td>\n",
              "      <td>-87.99109</td>\n",
              "      <td>14.37524</td>\n",
              "      <td>-22.70119</td>\n",
              "      <td>-58.81266</td>\n",
              "      <td>5.66812</td>\n",
              "      <td>-19.68073</td>\n",
              "      <td>33.04964</td>\n",
              "      <td>42.87836</td>\n",
              "      <td>-9.90378</td>\n",
              "      <td>-32.22788</td>\n",
              "      <td>70.49388</td>\n",
              "      <td>12.04941</td>\n",
              "      <td>58.43453</td>\n",
              "      <td>26.92061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2001</td>\n",
              "      <td>50.95714</td>\n",
              "      <td>31.85602</td>\n",
              "      <td>55.81851</td>\n",
              "      <td>13.41693</td>\n",
              "      <td>-6.57898</td>\n",
              "      <td>-18.54940</td>\n",
              "      <td>-3.27872</td>\n",
              "      <td>-2.35035</td>\n",
              "      <td>16.07017</td>\n",
              "      <td>1.39518</td>\n",
              "      <td>2.73553</td>\n",
              "      <td>0.82804</td>\n",
              "      <td>7.46586</td>\n",
              "      <td>699.54544</td>\n",
              "      <td>1016.00954</td>\n",
              "      <td>594.06748</td>\n",
              "      <td>355.73663</td>\n",
              "      <td>507.39931</td>\n",
              "      <td>387.69910</td>\n",
              "      <td>287.15347</td>\n",
              "      <td>112.37152</td>\n",
              "      <td>161.68928</td>\n",
              "      <td>144.14353</td>\n",
              "      <td>199.29693</td>\n",
              "      <td>-4.24359</td>\n",
              "      <td>-297.00587</td>\n",
              "      <td>-148.36392</td>\n",
              "      <td>-7.94726</td>\n",
              "      <td>-18.71630</td>\n",
              "      <td>12.77542</td>\n",
              "      <td>-25.37725</td>\n",
              "      <td>9.71410</td>\n",
              "      <td>0.13843</td>\n",
              "      <td>26.79723</td>\n",
              "      <td>6.30760</td>\n",
              "      <td>28.70107</td>\n",
              "      <td>-74.89005</td>\n",
              "      <td>-289.19553</td>\n",
              "      <td>-166.26089</td>\n",
              "      <td>...</td>\n",
              "      <td>18.50939</td>\n",
              "      <td>16.97216</td>\n",
              "      <td>24.26629</td>\n",
              "      <td>-10.50788</td>\n",
              "      <td>-8.68412</td>\n",
              "      <td>54.75759</td>\n",
              "      <td>194.74034</td>\n",
              "      <td>7.95966</td>\n",
              "      <td>-18.22685</td>\n",
              "      <td>0.06463</td>\n",
              "      <td>-2.63069</td>\n",
              "      <td>26.02561</td>\n",
              "      <td>1.75729</td>\n",
              "      <td>-262.36917</td>\n",
              "      <td>-233.60089</td>\n",
              "      <td>-2.50502</td>\n",
              "      <td>-12.14279</td>\n",
              "      <td>81.37617</td>\n",
              "      <td>2.07554</td>\n",
              "      <td>-1.82381</td>\n",
              "      <td>183.65292</td>\n",
              "      <td>22.64797</td>\n",
              "      <td>-39.98887</td>\n",
              "      <td>43.37381</td>\n",
              "      <td>-31.56737</td>\n",
              "      <td>-4.88840</td>\n",
              "      <td>-36.53213</td>\n",
              "      <td>-23.94662</td>\n",
              "      <td>-84.19275</td>\n",
              "      <td>66.00518</td>\n",
              "      <td>3.03800</td>\n",
              "      <td>26.05866</td>\n",
              "      <td>-50.92779</td>\n",
              "      <td>10.93792</td>\n",
              "      <td>-0.07568</td>\n",
              "      <td>43.20130</td>\n",
              "      <td>-115.00698</td>\n",
              "      <td>-0.05859</td>\n",
              "      <td>39.67068</td>\n",
              "      <td>-0.66345</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2001</td>\n",
              "      <td>48.24750</td>\n",
              "      <td>-1.89837</td>\n",
              "      <td>36.29772</td>\n",
              "      <td>2.58776</td>\n",
              "      <td>0.97170</td>\n",
              "      <td>-26.21683</td>\n",
              "      <td>5.05097</td>\n",
              "      <td>-10.34124</td>\n",
              "      <td>3.55005</td>\n",
              "      <td>-6.36304</td>\n",
              "      <td>6.63016</td>\n",
              "      <td>-3.35142</td>\n",
              "      <td>37.64085</td>\n",
              "      <td>2174.08189</td>\n",
              "      <td>697.43346</td>\n",
              "      <td>459.24587</td>\n",
              "      <td>742.78961</td>\n",
              "      <td>229.30783</td>\n",
              "      <td>387.89697</td>\n",
              "      <td>249.06662</td>\n",
              "      <td>245.89870</td>\n",
              "      <td>176.20527</td>\n",
              "      <td>98.82222</td>\n",
              "      <td>150.97286</td>\n",
              "      <td>78.49057</td>\n",
              "      <td>-62.00282</td>\n",
              "      <td>43.49659</td>\n",
              "      <td>-96.42719</td>\n",
              "      <td>-108.96608</td>\n",
              "      <td>14.22854</td>\n",
              "      <td>14.54178</td>\n",
              "      <td>-23.55608</td>\n",
              "      <td>-39.36953</td>\n",
              "      <td>-43.59209</td>\n",
              "      <td>20.83714</td>\n",
              "      <td>35.63919</td>\n",
              "      <td>-181.34947</td>\n",
              "      <td>-93.66614</td>\n",
              "      <td>-90.55616</td>\n",
              "      <td>...</td>\n",
              "      <td>4.56917</td>\n",
              "      <td>-37.32280</td>\n",
              "      <td>4.15159</td>\n",
              "      <td>12.24315</td>\n",
              "      <td>35.02697</td>\n",
              "      <td>-178.89573</td>\n",
              "      <td>82.46573</td>\n",
              "      <td>-20.49425</td>\n",
              "      <td>101.78577</td>\n",
              "      <td>-19.77808</td>\n",
              "      <td>-21.52657</td>\n",
              "      <td>3.36303</td>\n",
              "      <td>-11.63176</td>\n",
              "      <td>51.55411</td>\n",
              "      <td>-50.57576</td>\n",
              "      <td>-28.14755</td>\n",
              "      <td>-83.15795</td>\n",
              "      <td>-7.35260</td>\n",
              "      <td>-22.11505</td>\n",
              "      <td>1.18279</td>\n",
              "      <td>-122.70467</td>\n",
              "      <td>150.57360</td>\n",
              "      <td>24.37468</td>\n",
              "      <td>41.19821</td>\n",
              "      <td>-37.04318</td>\n",
              "      <td>-28.72986</td>\n",
              "      <td>162.19614</td>\n",
              "      <td>22.18309</td>\n",
              "      <td>-8.63509</td>\n",
              "      <td>85.23416</td>\n",
              "      <td>34.57337</td>\n",
              "      <td>-171.70734</td>\n",
              "      <td>-16.96705</td>\n",
              "      <td>-46.67617</td>\n",
              "      <td>-12.51516</td>\n",
              "      <td>82.58061</td>\n",
              "      <td>-72.08993</td>\n",
              "      <td>9.90558</td>\n",
              "      <td>199.62971</td>\n",
              "      <td>18.85382</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2001</td>\n",
              "      <td>50.97020</td>\n",
              "      <td>42.20998</td>\n",
              "      <td>67.09964</td>\n",
              "      <td>8.46791</td>\n",
              "      <td>-15.85279</td>\n",
              "      <td>-16.81409</td>\n",
              "      <td>-12.48207</td>\n",
              "      <td>-9.37636</td>\n",
              "      <td>12.63699</td>\n",
              "      <td>0.93609</td>\n",
              "      <td>1.60923</td>\n",
              "      <td>2.19223</td>\n",
              "      <td>47.32082</td>\n",
              "      <td>894.28471</td>\n",
              "      <td>809.86615</td>\n",
              "      <td>318.78559</td>\n",
              "      <td>435.04497</td>\n",
              "      <td>341.61467</td>\n",
              "      <td>334.30734</td>\n",
              "      <td>322.99589</td>\n",
              "      <td>190.61921</td>\n",
              "      <td>235.84715</td>\n",
              "      <td>96.89517</td>\n",
              "      <td>210.58870</td>\n",
              "      <td>5.60463</td>\n",
              "      <td>-199.63958</td>\n",
              "      <td>204.85812</td>\n",
              "      <td>-77.17695</td>\n",
              "      <td>-65.79741</td>\n",
              "      <td>-6.95097</td>\n",
              "      <td>-12.15262</td>\n",
              "      <td>-3.85410</td>\n",
              "      <td>20.68990</td>\n",
              "      <td>-20.30480</td>\n",
              "      <td>37.15045</td>\n",
              "      <td>11.20673</td>\n",
              "      <td>-124.09519</td>\n",
              "      <td>-295.98542</td>\n",
              "      <td>-33.31169</td>\n",
              "      <td>...</td>\n",
              "      <td>45.25506</td>\n",
              "      <td>10.42226</td>\n",
              "      <td>27.88782</td>\n",
              "      <td>-17.12676</td>\n",
              "      <td>-31.54772</td>\n",
              "      <td>-76.86293</td>\n",
              "      <td>41.17343</td>\n",
              "      <td>-138.32535</td>\n",
              "      <td>-53.96905</td>\n",
              "      <td>-21.30266</td>\n",
              "      <td>-24.87362</td>\n",
              "      <td>-2.46595</td>\n",
              "      <td>-4.05003</td>\n",
              "      <td>-56.51161</td>\n",
              "      <td>-34.56445</td>\n",
              "      <td>-5.07092</td>\n",
              "      <td>-47.75605</td>\n",
              "      <td>64.81513</td>\n",
              "      <td>-97.42948</td>\n",
              "      <td>-12.59418</td>\n",
              "      <td>55.23699</td>\n",
              "      <td>28.85657</td>\n",
              "      <td>54.53513</td>\n",
              "      <td>-31.97077</td>\n",
              "      <td>20.03279</td>\n",
              "      <td>-8.07892</td>\n",
              "      <td>-55.12617</td>\n",
              "      <td>26.58961</td>\n",
              "      <td>-10.27183</td>\n",
              "      <td>-30.64232</td>\n",
              "      <td>9.92661</td>\n",
              "      <td>-55.95724</td>\n",
              "      <td>64.92712</td>\n",
              "      <td>-17.72522</td>\n",
              "      <td>-1.49237</td>\n",
              "      <td>-7.50035</td>\n",
              "      <td>51.76631</td>\n",
              "      <td>7.88713</td>\n",
              "      <td>55.66926</td>\n",
              "      <td>28.74903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515340</th>\n",
              "      <td>2006</td>\n",
              "      <td>51.28467</td>\n",
              "      <td>45.88068</td>\n",
              "      <td>22.19582</td>\n",
              "      <td>-5.53319</td>\n",
              "      <td>-3.61835</td>\n",
              "      <td>-16.36914</td>\n",
              "      <td>2.12652</td>\n",
              "      <td>5.18160</td>\n",
              "      <td>-8.66890</td>\n",
              "      <td>2.67217</td>\n",
              "      <td>0.45234</td>\n",
              "      <td>2.51380</td>\n",
              "      <td>18.79583</td>\n",
              "      <td>592.17931</td>\n",
              "      <td>619.01842</td>\n",
              "      <td>681.30323</td>\n",
              "      <td>415.21939</td>\n",
              "      <td>639.90327</td>\n",
              "      <td>287.20710</td>\n",
              "      <td>375.31963</td>\n",
              "      <td>212.76265</td>\n",
              "      <td>246.26651</td>\n",
              "      <td>143.48234</td>\n",
              "      <td>217.45556</td>\n",
              "      <td>9.90577</td>\n",
              "      <td>-62.51153</td>\n",
              "      <td>-76.96635</td>\n",
              "      <td>-60.62065</td>\n",
              "      <td>67.81811</td>\n",
              "      <td>-9.20742</td>\n",
              "      <td>-30.73303</td>\n",
              "      <td>21.58525</td>\n",
              "      <td>-31.21664</td>\n",
              "      <td>-36.39659</td>\n",
              "      <td>28.18814</td>\n",
              "      <td>39.46981</td>\n",
              "      <td>-77.13200</td>\n",
              "      <td>-43.39948</td>\n",
              "      <td>-57.69462</td>\n",
              "      <td>...</td>\n",
              "      <td>-74.40960</td>\n",
              "      <td>78.78128</td>\n",
              "      <td>-14.74786</td>\n",
              "      <td>18.02148</td>\n",
              "      <td>-19.61304</td>\n",
              "      <td>-50.34714</td>\n",
              "      <td>87.06521</td>\n",
              "      <td>43.77874</td>\n",
              "      <td>-5.00339</td>\n",
              "      <td>101.08108</td>\n",
              "      <td>-13.34314</td>\n",
              "      <td>-59.17573</td>\n",
              "      <td>-46.22182</td>\n",
              "      <td>-27.10155</td>\n",
              "      <td>-7.07840</td>\n",
              "      <td>23.04732</td>\n",
              "      <td>29.32027</td>\n",
              "      <td>2.10740</td>\n",
              "      <td>-5.77951</td>\n",
              "      <td>2.68326</td>\n",
              "      <td>-13.78081</td>\n",
              "      <td>6.33542</td>\n",
              "      <td>-37.38191</td>\n",
              "      <td>-14.90918</td>\n",
              "      <td>26.87263</td>\n",
              "      <td>7.07232</td>\n",
              "      <td>-127.04955</td>\n",
              "      <td>86.78200</td>\n",
              "      <td>-68.14511</td>\n",
              "      <td>67.44416</td>\n",
              "      <td>4.81440</td>\n",
              "      <td>-3.75991</td>\n",
              "      <td>-30.92584</td>\n",
              "      <td>26.33968</td>\n",
              "      <td>-5.03390</td>\n",
              "      <td>21.86037</td>\n",
              "      <td>-142.29410</td>\n",
              "      <td>3.42901</td>\n",
              "      <td>-41.14721</td>\n",
              "      <td>-15.46052</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515341</th>\n",
              "      <td>2006</td>\n",
              "      <td>49.87870</td>\n",
              "      <td>37.93125</td>\n",
              "      <td>18.65987</td>\n",
              "      <td>-3.63581</td>\n",
              "      <td>-27.75665</td>\n",
              "      <td>-18.52988</td>\n",
              "      <td>7.76108</td>\n",
              "      <td>3.56109</td>\n",
              "      <td>-2.50351</td>\n",
              "      <td>2.20175</td>\n",
              "      <td>-0.58487</td>\n",
              "      <td>-9.78657</td>\n",
              "      <td>35.81410</td>\n",
              "      <td>1047.28364</td>\n",
              "      <td>1451.87226</td>\n",
              "      <td>633.17982</td>\n",
              "      <td>448.46796</td>\n",
              "      <td>826.14418</td>\n",
              "      <td>277.55902</td>\n",
              "      <td>202.20787</td>\n",
              "      <td>241.85866</td>\n",
              "      <td>199.31274</td>\n",
              "      <td>180.60934</td>\n",
              "      <td>168.49980</td>\n",
              "      <td>89.28058</td>\n",
              "      <td>237.30605</td>\n",
              "      <td>-72.22211</td>\n",
              "      <td>-10.02772</td>\n",
              "      <td>-41.24980</td>\n",
              "      <td>-7.59473</td>\n",
              "      <td>-5.23307</td>\n",
              "      <td>24.88978</td>\n",
              "      <td>39.42813</td>\n",
              "      <td>-40.17760</td>\n",
              "      <td>26.51372</td>\n",
              "      <td>79.84191</td>\n",
              "      <td>-15.49724</td>\n",
              "      <td>46.37942</td>\n",
              "      <td>-209.97900</td>\n",
              "      <td>...</td>\n",
              "      <td>-61.06002</td>\n",
              "      <td>50.86072</td>\n",
              "      <td>-3.54799</td>\n",
              "      <td>36.50303</td>\n",
              "      <td>20.94570</td>\n",
              "      <td>-79.43478</td>\n",
              "      <td>-15.49133</td>\n",
              "      <td>17.79165</td>\n",
              "      <td>95.84510</td>\n",
              "      <td>-37.68620</td>\n",
              "      <td>8.51302</td>\n",
              "      <td>13.72492</td>\n",
              "      <td>-71.83419</td>\n",
              "      <td>-191.37407</td>\n",
              "      <td>-34.71662</td>\n",
              "      <td>28.34789</td>\n",
              "      <td>45.25187</td>\n",
              "      <td>17.07862</td>\n",
              "      <td>31.46894</td>\n",
              "      <td>-13.44802</td>\n",
              "      <td>38.68815</td>\n",
              "      <td>109.03046</td>\n",
              "      <td>-42.45525</td>\n",
              "      <td>18.67531</td>\n",
              "      <td>-50.86612</td>\n",
              "      <td>11.26242</td>\n",
              "      <td>59.30165</td>\n",
              "      <td>178.15846</td>\n",
              "      <td>-29.04997</td>\n",
              "      <td>70.22336</td>\n",
              "      <td>32.38589</td>\n",
              "      <td>-32.75535</td>\n",
              "      <td>-61.05473</td>\n",
              "      <td>56.65182</td>\n",
              "      <td>15.29965</td>\n",
              "      <td>95.88193</td>\n",
              "      <td>-10.63242</td>\n",
              "      <td>12.96552</td>\n",
              "      <td>92.11633</td>\n",
              "      <td>10.88815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515342</th>\n",
              "      <td>2006</td>\n",
              "      <td>45.12852</td>\n",
              "      <td>12.65758</td>\n",
              "      <td>-38.72018</td>\n",
              "      <td>8.80882</td>\n",
              "      <td>-29.29985</td>\n",
              "      <td>-2.28706</td>\n",
              "      <td>-18.40424</td>\n",
              "      <td>-22.28726</td>\n",
              "      <td>-4.52429</td>\n",
              "      <td>-11.46411</td>\n",
              "      <td>3.28514</td>\n",
              "      <td>1.99943</td>\n",
              "      <td>27.77109</td>\n",
              "      <td>1693.72442</td>\n",
              "      <td>3825.48305</td>\n",
              "      <td>2714.53243</td>\n",
              "      <td>1036.34216</td>\n",
              "      <td>1171.81248</td>\n",
              "      <td>468.44308</td>\n",
              "      <td>1042.15436</td>\n",
              "      <td>278.94429</td>\n",
              "      <td>497.83085</td>\n",
              "      <td>423.82729</td>\n",
              "      <td>239.91028</td>\n",
              "      <td>-61.01287</td>\n",
              "      <td>-1383.48696</td>\n",
              "      <td>-1828.43740</td>\n",
              "      <td>-131.54731</td>\n",
              "      <td>138.81510</td>\n",
              "      <td>51.36991</td>\n",
              "      <td>-45.25035</td>\n",
              "      <td>138.31791</td>\n",
              "      <td>-107.60348</td>\n",
              "      <td>-17.01878</td>\n",
              "      <td>-36.53276</td>\n",
              "      <td>226.67213</td>\n",
              "      <td>716.76768</td>\n",
              "      <td>-267.06525</td>\n",
              "      <td>-362.27860</td>\n",
              "      <td>...</td>\n",
              "      <td>191.56779</td>\n",
              "      <td>72.49396</td>\n",
              "      <td>-38.96949</td>\n",
              "      <td>61.22195</td>\n",
              "      <td>24.49062</td>\n",
              "      <td>182.62433</td>\n",
              "      <td>510.41684</td>\n",
              "      <td>-379.38804</td>\n",
              "      <td>226.54992</td>\n",
              "      <td>-201.28237</td>\n",
              "      <td>6.89971</td>\n",
              "      <td>86.07237</td>\n",
              "      <td>-42.85773</td>\n",
              "      <td>-215.01900</td>\n",
              "      <td>88.60866</td>\n",
              "      <td>14.51385</td>\n",
              "      <td>-28.33832</td>\n",
              "      <td>255.17385</td>\n",
              "      <td>14.17125</td>\n",
              "      <td>25.06417</td>\n",
              "      <td>218.85618</td>\n",
              "      <td>-222.53173</td>\n",
              "      <td>35.58546</td>\n",
              "      <td>30.88622</td>\n",
              "      <td>-24.91594</td>\n",
              "      <td>-2.65009</td>\n",
              "      <td>-69.53483</td>\n",
              "      <td>333.67598</td>\n",
              "      <td>-28.24399</td>\n",
              "      <td>202.51566</td>\n",
              "      <td>-18.73598</td>\n",
              "      <td>-71.15954</td>\n",
              "      <td>-123.98443</td>\n",
              "      <td>121.26989</td>\n",
              "      <td>10.89629</td>\n",
              "      <td>34.62409</td>\n",
              "      <td>-248.61020</td>\n",
              "      <td>-6.07171</td>\n",
              "      <td>53.96319</td>\n",
              "      <td>-8.09364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515343</th>\n",
              "      <td>2006</td>\n",
              "      <td>44.16614</td>\n",
              "      <td>32.38368</td>\n",
              "      <td>-3.34971</td>\n",
              "      <td>-2.49165</td>\n",
              "      <td>-19.59278</td>\n",
              "      <td>-18.67098</td>\n",
              "      <td>8.78428</td>\n",
              "      <td>4.02039</td>\n",
              "      <td>-12.01230</td>\n",
              "      <td>-0.74075</td>\n",
              "      <td>-1.26523</td>\n",
              "      <td>-4.41983</td>\n",
              "      <td>140.44937</td>\n",
              "      <td>2850.23336</td>\n",
              "      <td>1875.28895</td>\n",
              "      <td>1362.98053</td>\n",
              "      <td>784.39737</td>\n",
              "      <td>908.09838</td>\n",
              "      <td>367.12005</td>\n",
              "      <td>692.58547</td>\n",
              "      <td>286.72625</td>\n",
              "      <td>395.46735</td>\n",
              "      <td>221.19089</td>\n",
              "      <td>211.62098</td>\n",
              "      <td>141.17304</td>\n",
              "      <td>647.52054</td>\n",
              "      <td>-451.67671</td>\n",
              "      <td>-170.33993</td>\n",
              "      <td>-106.30851</td>\n",
              "      <td>129.80285</td>\n",
              "      <td>-118.54997</td>\n",
              "      <td>116.14019</td>\n",
              "      <td>-18.36186</td>\n",
              "      <td>-29.42843</td>\n",
              "      <td>13.59803</td>\n",
              "      <td>296.86552</td>\n",
              "      <td>-332.24640</td>\n",
              "      <td>219.84847</td>\n",
              "      <td>-180.27193</td>\n",
              "      <td>...</td>\n",
              "      <td>14.33401</td>\n",
              "      <td>-10.61959</td>\n",
              "      <td>-37.44137</td>\n",
              "      <td>32.72492</td>\n",
              "      <td>-16.62357</td>\n",
              "      <td>-343.07974</td>\n",
              "      <td>148.00075</td>\n",
              "      <td>-64.73672</td>\n",
              "      <td>59.16029</td>\n",
              "      <td>-129.60142</td>\n",
              "      <td>24.47146</td>\n",
              "      <td>-90.78617</td>\n",
              "      <td>-34.58624</td>\n",
              "      <td>-285.37506</td>\n",
              "      <td>-8.78066</td>\n",
              "      <td>63.91160</td>\n",
              "      <td>58.86067</td>\n",
              "      <td>43.28537</td>\n",
              "      <td>22.69472</td>\n",
              "      <td>-0.93940</td>\n",
              "      <td>417.76862</td>\n",
              "      <td>78.26912</td>\n",
              "      <td>-173.95232</td>\n",
              "      <td>-35.42845</td>\n",
              "      <td>10.59859</td>\n",
              "      <td>-16.51518</td>\n",
              "      <td>157.75671</td>\n",
              "      <td>294.31838</td>\n",
              "      <td>-37.30155</td>\n",
              "      <td>80.00327</td>\n",
              "      <td>67.16763</td>\n",
              "      <td>282.77624</td>\n",
              "      <td>-4.63677</td>\n",
              "      <td>144.00125</td>\n",
              "      <td>21.62652</td>\n",
              "      <td>-29.72432</td>\n",
              "      <td>71.47198</td>\n",
              "      <td>20.32240</td>\n",
              "      <td>14.83107</td>\n",
              "      <td>39.74909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515344</th>\n",
              "      <td>2005</td>\n",
              "      <td>51.85726</td>\n",
              "      <td>59.11655</td>\n",
              "      <td>26.39436</td>\n",
              "      <td>-5.46030</td>\n",
              "      <td>-20.69012</td>\n",
              "      <td>-19.95528</td>\n",
              "      <td>-6.72771</td>\n",
              "      <td>2.29590</td>\n",
              "      <td>10.31018</td>\n",
              "      <td>6.26597</td>\n",
              "      <td>-1.78800</td>\n",
              "      <td>-6.19786</td>\n",
              "      <td>20.16600</td>\n",
              "      <td>598.45275</td>\n",
              "      <td>1140.69539</td>\n",
              "      <td>721.49244</td>\n",
              "      <td>272.84841</td>\n",
              "      <td>564.06690</td>\n",
              "      <td>199.41547</td>\n",
              "      <td>189.04637</td>\n",
              "      <td>217.32042</td>\n",
              "      <td>137.13390</td>\n",
              "      <td>150.34608</td>\n",
              "      <td>98.21589</td>\n",
              "      <td>48.12644</td>\n",
              "      <td>-601.59295</td>\n",
              "      <td>10.58466</td>\n",
              "      <td>-83.35368</td>\n",
              "      <td>96.86756</td>\n",
              "      <td>69.40708</td>\n",
              "      <td>8.06033</td>\n",
              "      <td>-26.01693</td>\n",
              "      <td>-2.93173</td>\n",
              "      <td>26.18398</td>\n",
              "      <td>-12.24660</td>\n",
              "      <td>-14.52391</td>\n",
              "      <td>-121.61676</td>\n",
              "      <td>119.15632</td>\n",
              "      <td>-229.55722</td>\n",
              "      <td>...</td>\n",
              "      <td>1.78072</td>\n",
              "      <td>64.75548</td>\n",
              "      <td>24.55866</td>\n",
              "      <td>-1.12509</td>\n",
              "      <td>-13.58287</td>\n",
              "      <td>-99.66038</td>\n",
              "      <td>-124.73875</td>\n",
              "      <td>67.02630</td>\n",
              "      <td>33.05618</td>\n",
              "      <td>60.25818</td>\n",
              "      <td>28.00288</td>\n",
              "      <td>10.62425</td>\n",
              "      <td>-8.86772</td>\n",
              "      <td>78.13543</td>\n",
              "      <td>-181.10013</td>\n",
              "      <td>74.69489</td>\n",
              "      <td>57.45083</td>\n",
              "      <td>114.08816</td>\n",
              "      <td>-9.91322</td>\n",
              "      <td>7.53612</td>\n",
              "      <td>97.06395</td>\n",
              "      <td>233.17754</td>\n",
              "      <td>-100.68441</td>\n",
              "      <td>27.67012</td>\n",
              "      <td>-37.33008</td>\n",
              "      <td>-0.34676</td>\n",
              "      <td>-207.78766</td>\n",
              "      <td>116.75005</td>\n",
              "      <td>-91.82912</td>\n",
              "      <td>8.35020</td>\n",
              "      <td>-11.50511</td>\n",
              "      <td>-69.18291</td>\n",
              "      <td>60.58456</td>\n",
              "      <td>28.64599</td>\n",
              "      <td>-4.39620</td>\n",
              "      <td>-64.56491</td>\n",
              "      <td>-45.61012</td>\n",
              "      <td>-5.51512</td>\n",
              "      <td>32.35602</td>\n",
              "      <td>12.17352</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>515345 rows × 91 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        year      var1      var2  ...     var88      var89     var90\n",
              "0       2001  49.94357  21.47114  ...  -1.82223  -27.46348   2.26327\n",
              "1       2001  48.73215  18.42930  ...  12.04941   58.43453  26.92061\n",
              "2       2001  50.95714  31.85602  ...  -0.05859   39.67068  -0.66345\n",
              "3       2001  48.24750  -1.89837  ...   9.90558  199.62971  18.85382\n",
              "4       2001  50.97020  42.20998  ...   7.88713   55.66926  28.74903\n",
              "...      ...       ...       ...  ...       ...        ...       ...\n",
              "515340  2006  51.28467  45.88068  ...   3.42901  -41.14721 -15.46052\n",
              "515341  2006  49.87870  37.93125  ...  12.96552   92.11633  10.88815\n",
              "515342  2006  45.12852  12.65758  ...  -6.07171   53.96319  -8.09364\n",
              "515343  2006  44.16614  32.38368  ...  20.32240   14.83107  39.74909\n",
              "515344  2005  51.85726  59.11655  ...  -5.51512   32.35602  12.17352\n",
              "\n",
              "[515345 rows x 91 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L_g-fs0zoffw",
        "colab_type": "text"
      },
      "source": [
        "To set up our data for classification, we'll use the \"year\" field to represent\n",
        "whether a song was released in the 20-th century. In our case `df[\"year\"]` will be 1 if\n",
        "the year was released after 2000, and 0 otherwise."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YaySO48Yoffx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df[\"year\"] = df[\"year\"].map(lambda x: int(x > 2000))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ijMkmkHVoffz",
        "colab_type": "text"
      },
      "source": [
        "### Part (a) -- 2 pts\n",
        "\n",
        "The data set description text asks us to respect the below train/test split to\n",
        "avoid the \"producer effect\". That is, we want to make sure that no song from a single artist\n",
        "ends up in both the training and test set.\n",
        "\n",
        "Explain why it would be problematic to have\n",
        "some songs from an artist in the training set, and other songs from the same artist in the\n",
        "test set. (Hint: Remember that we want our test accuracy to predict how well the model\n",
        "will perform in practice on a song it hasn't learned about.)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p0wQ6VAxoff1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df_train = df[:463715]\n",
        "df_test = df[463715:]\n",
        "\n",
        "# conver to numpy\n",
        "train_xs = df_train[x_labels].to_numpy()\n",
        "train_ts = df_train[t_label].to_numpy()\n",
        "test_xs = df_test[x_labels].to_numpy()\n",
        "test_ts = df_test[t_label].to_numpy()\n",
        "\n",
        "# Since the songs from an artist tend to be similar, when our model trains on \n",
        "# the songs from that artist and is later test on the songs from that artist\n",
        "# it will not give an acurate measure of the testing error. To get an acurate \n",
        "# estimate we have to test our model on artists that it has not seen before."
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DY5eBrrSoff3",
        "colab_type": "text"
      },
      "source": [
        "### Part (b) -- 1 pts\n",
        "\n",
        "It can be beneficial to **normalize** the columns, so that each column (feature)\n",
        "has the *same* mean and standard deviation."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rRUeEnj9off6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "feature_means = df_train.mean()[1:].to_numpy() # the [1:] removes the mean of the \"year\" field\n",
        "feature_stds  = df_train.std()[1:].to_numpy()\n",
        "\n",
        "train_norm_xs = (train_xs - feature_means) / feature_stds\n",
        "test_norm_xs = (test_xs - feature_means) / feature_stds"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UJQKuY5_off9",
        "colab_type": "text"
      },
      "source": [
        "Notice how in our code, we normalized the test set using the *training data means and standard deviations*.\n",
        "This is *not* a bug.\n",
        "\n",
        "Explain why it would be improper to compute and use test set means\n",
        "and standard deviations. (Hint: Remember what we want to use the test accuracy to measure.)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3QBzkix4off-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#we would want to use mean and standard deviation of the training set\n",
        "#to normalize the test set, because we want to correctly measure the\n",
        "#test accuracy in the same conditions that the training took place."
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HtbGLXAoofgC",
        "colab_type": "text"
      },
      "source": [
        "### Part (c) -- 1 pts\n",
        "\n",
        "Finally, we'll move some of the data in our training set into a validation set.\n",
        "\n",
        "Explain why we should limit how many times we use the test set, and that we should use the validation\n",
        "set during the model building process."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yxIpNjCzofgD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# shuffle the training set\n",
        "reindex = np.random.permutation(len(train_xs))\n",
        "train_xs = train_xs[reindex]\n",
        "train_norm_xs = train_norm_xs[reindex]\n",
        "train_ts = train_ts[reindex]\n",
        "\n",
        "# use the first 50000 elements of `train_xs` as the validation set\n",
        "train_xs, val_xs           = train_xs[50000:], train_xs[:50000]\n",
        "train_norm_xs, val_norm_xs = train_norm_xs[50000:], train_norm_xs[:50000]\n",
        "train_ts, val_ts           = train_ts[50000:], train_ts[:50000]\n",
        "\n",
        "# Because refining the model until the test error is minimised exposes us to \n",
        "# producer effect if we keep using the same test data.\n",
        "# using a validation set allowes to find a more optimised version of our model\n",
        "# on the training set before we actually use the test data"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vCzZjoTJofgG",
        "colab_type": "text"
      },
      "source": [
        "## Part 2. Classification\n",
        "\n",
        "We will first build a *classification* model to perform decade classification.\n",
        "These helper functions are written for you. All other code that you write in this\n",
        "section should be vectorized whenever possible, and you will be penalized for \n",
        "not vectorizing your code."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "poWqa-GlofgH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def sigmoid(z):\n",
        "  return 1 / (1 + np.exp(-z))\n",
        " \n",
        "def cross_entropy(t, y):\n",
        "  \n",
        "  return -t * np.log(y) - (1 - t) * np.log(1 - y)\n",
        "\n",
        "def cost(y, t):\n",
        "  return np.mean(cross_entropy(t, y))\n",
        "\n",
        "def get_accuracy(y, t):\n",
        "  acc = 0\n",
        "  N = 0\n",
        "  for i in range(len(y)):\n",
        "    N += 1\n",
        "    if (y[i] >= 0.5 and t[i] == 1) or (y[i] < 0.5 and t[i] == 0):\n",
        "      acc += 1\n",
        "  return acc / N"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B2FNHOGVofgL",
        "colab_type": "text"
      },
      "source": [
        "### Part (a) -- 2 pts\n",
        "\n",
        "Write a function `pred` that computes the prediction `y` based on weights `w` and bias `b`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4O7RIlVGofgM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def pred(w, b, X):\n",
        "  \"\"\"\n",
        "  Returns the prediction `y` of the target based on the weights `w` and scalar bias `b`.\n",
        "\n",
        "  Preconditions: np.shape(w) == (90,)\n",
        "                 type(b) == float\n",
        "                 np.shape(X) = (N, 90) for some N\n",
        "\n",
        "  >>> pred(np.zeros(90), 1, np.ones([2, 90]))\n",
        "  array([0.73105858, 0.73105858]) # It's okay if your output differs in the last decimals\n",
        "  \"\"\"\n",
        "  return sigmoid(np.matmul(X, w) + b)\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gZlnYbCMofgO",
        "colab_type": "text"
      },
      "source": [
        "### Part (b) -- 3 pts\n",
        "\n",
        "Write a function `derivative_cost` that computes and returns the gradients \n",
        "$\\frac{\\partial\\mathcal{E}}{\\partial {\\bf w}}$ and\n",
        "$\\frac{\\partial\\mathcal{E}}{\\partial b}$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WU4n4yx_ofgO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def derivative_cost(X, y, t):\n",
        "  \"\"\"\n",
        "  Returns a tuple containing the gradients dEdw and dEdb.\n",
        "\n",
        "  Precondition: np.shape(X) == (N, 90) for some N\n",
        "                np.shape(y) == (N,)\n",
        "                np.shape(t) == (N,)\n",
        "\n",
        "  Postcondition: np.shape(dEdw) = (90,)\n",
        "           type(dEdb) = float\n",
        "  \"\"\"\n",
        "  dw = np.matmul(X.T,(y-t))\n",
        "  db = (y-t).sum()\n",
        "  N = X.shape[0]\n",
        "  return dw/N, db/N"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a3o87UVzofgS",
        "colab_type": "text"
      },
      "source": [
        "### Part (c) -- 2 pts\n",
        "\n",
        "We can check that our derivative is implemented correctly using the finite difference rule. In 1D, the\n",
        "finite difference rule tells us that for small $h$, we should have\n",
        "\n",
        "$$\\frac{f(x+h) - f(x)}{h} \\approx f'(x)$$\n",
        "\n",
        "Prove to yourself (and your TA) that $\\frac{\\partial\\mathcal{E}}{\\partial b}$  is implement correctly\n",
        "by comparing the result from `derivative_cost` with the value of `(pred(w, b + h, X) - pred(w, b, X)) / h`.\n",
        "Justify your choice of `w`, `b`, and `X`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F6Emgj1nofgT",
        "colab_type": "code",
        "outputId": "e2cac7fc-e851-4202-dc1b-ecaf5d92c2e0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        }
      },
      "source": [
        "# Your code goes \n",
        "N0 = 200000\n",
        "X = (np.random.random((N0,90)) - 1/2)\n",
        "b = 1.0\n",
        "w = np.ones((90,))\n",
        "t = (np.random.random((N0,)) > 1/2).astype(int)\n",
        "h = 0.000001\n",
        "definition = (cost(pred(w, b +h , X), t) - cost(pred(w, b, X), t))/h\n",
        "gradient = derivative_cost(X, pred(w,b,X), t)[1]\n",
        "\n",
        "print(\"the derivative calculated by the definition is : \", definition)\n",
        "print(\"the derivative calculated by our function is : \", gradient)\n",
        "#difference between the two is really small\n",
        "print(\"the difference is : \", definition - gradient)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the derivative calculated by the definition is :  0.12215028610818024\n",
            "the derivative calculated by our function is :  0.1221502274440227\n",
            "the difference is :  5.866415754562926e-08\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6oZpOFuVDj8U",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hl_U5H7GofgV",
        "colab_type": "text"
      },
      "source": [
        "### Part (d) -- 2 pts\n",
        "\n",
        "Prove to yourself (and your TA) that $\\frac{\\partial\\mathcal{E}}{\\partial {\\bf w}}$  is implement correctly."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bwD4Pv7oofgW",
        "colab_type": "code",
        "outputId": "6b6a213b-8e87-43f0-eaeb-40101706a73b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 558
        }
      },
      "source": [
        "# Your code goes here. You might find this below code helpful: but it's\n",
        "# up to you to figure out how/why, and how to modify the code\n",
        "h = 0.000001\n",
        "H = np.zeros(90)\n",
        "dw = np.zeros(90)\n",
        "for i in range(90):\n",
        "  H[i] = h\n",
        "  definition = (cost(pred(w + H, b, X), t) - cost(pred(w, b, X), t)) / h\n",
        "  dw[i] = definition\n",
        "  H[i] = 0\n",
        "gradient = derivative_cost(X, pred(w,b,X), t)[0]\n",
        "print(\"the derivative calculated by the definition is : \", dw)\n",
        "print(\"the derivative calculated by our function is : \", gradient)\n",
        "#difference between the two is really small\n",
        "print(\"the norm of the difference is : \", np.linalg.norm(dw - gradient, axis=0))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the derivative calculated by the definition is :  [0.01006801 0.00937896 0.0093305  0.00991903 0.00922126 0.00999119\n",
            " 0.01039205 0.0110262  0.00987989 0.0098596  0.00945888 0.00993846\n",
            " 0.00973782 0.00931996 0.0097427  0.00921779 0.01011887 0.00923383\n",
            " 0.01033692 0.0092879  0.01013153 0.0099659  0.00983051 0.00969939\n",
            " 0.00985353 0.01024428 0.00984679 0.00943358 0.00948646 0.0089183\n",
            " 0.0098432  0.01006734 0.00957175 0.00896338 0.0099807  0.00988215\n",
            " 0.00955174 0.00964132 0.00895221 0.0099755  0.01018593 0.00981525\n",
            " 0.0093398  0.00969635 0.00926577 0.01008172 0.01024318 0.01022875\n",
            " 0.00950196 0.00991028 0.00974103 0.00931692 0.00970041 0.00998807\n",
            " 0.01019274 0.00890804 0.01035587 0.00957079 0.0090234  0.00924171\n",
            " 0.01062123 0.00989497 0.01060923 0.00974039 0.00963279 0.00965499\n",
            " 0.01048682 0.00918282 0.00950563 0.00992694 0.00965629 0.01021902\n",
            " 0.00943981 0.00960278 0.00893556 0.00959231 0.00975497 0.01029162\n",
            " 0.00983969 0.01003341 0.00976438 0.01007983 0.00961537 0.00973705\n",
            " 0.00929148 0.01002651 0.0095298  0.00995967 0.00987214 0.00912016]\n",
            "the derivative calculated by our function is :  [0.01006801 0.00937895 0.0093305  0.00991903 0.00922125 0.00999119\n",
            " 0.01039204 0.01102619 0.00987989 0.00985959 0.00945887 0.00993845\n",
            " 0.00973781 0.00931996 0.0097427  0.00921778 0.01011886 0.00923383\n",
            " 0.01033691 0.0092879  0.01013153 0.0099659  0.00983051 0.00969938\n",
            " 0.00985353 0.01024427 0.00984678 0.00943358 0.00948646 0.0089183\n",
            " 0.0098432  0.01006734 0.00957174 0.00896338 0.00998069 0.00988214\n",
            " 0.00955174 0.00964131 0.00895221 0.00997549 0.01018592 0.00981525\n",
            " 0.00933979 0.00969634 0.00926576 0.01008171 0.01024318 0.01022875\n",
            " 0.00950195 0.00991028 0.00974103 0.00931691 0.00970041 0.00998807\n",
            " 0.01019274 0.00890804 0.01035587 0.00957078 0.00902339 0.0092417\n",
            " 0.01062122 0.00989497 0.01060923 0.00974039 0.00963278 0.00965498\n",
            " 0.01048682 0.00918281 0.00950562 0.00992694 0.00965629 0.01021902\n",
            " 0.0094398  0.00960277 0.00893555 0.0095923  0.00975496 0.01029162\n",
            " 0.00983969 0.01003341 0.00976437 0.01007983 0.00961536 0.00973705\n",
            " 0.00929147 0.01002651 0.00952979 0.00995967 0.00987213 0.00912016]\n",
            "the norm of the difference is :  4.184815766577062e-08\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wzJXer-rofgY",
        "colab_type": "text"
      },
      "source": [
        "### Part (e) -- 4 pts\n",
        "\n",
        "Now that you have a gradient function that works, we can actually run gradient descent! Complete\n",
        "the following code that will run stochastic: gradient descent training:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0YkIorF3ofgY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def run_gradient_descent(w0, b0, alpha=0.1, batch_size=100, max_iters=100):\n",
        "  \"\"\"Return the values of (w, b) after running gradient descent for max_iters.\n",
        "  We use:\n",
        "    - train_norm_xs and train_ts as the training set\n",
        "    - val_norm_xs and val_ts as the test set\n",
        "    - alpha as the learning rate\n",
        "    - (w0, b0) as the initial values of (w, b)\n",
        "\n",
        "  Precondition: np.shape(w0) == (90,)\n",
        "                type(b0) == float\n",
        " \n",
        "  Postcondition: np.shape(w) == (90,)\n",
        "                 type(b) == float\n",
        "  \"\"\"\n",
        "  w = w0\n",
        "  b = b0\n",
        "  iter = 0\n",
        "  #variables used for plotting\n",
        "  iters = []\n",
        "  costs = []\n",
        "  accuracies = []\n",
        "\n",
        "  while iter < max_iters:\n",
        "    # shuffle the training set (there is code above for how to do this)\n",
        "    \n",
        "    for i in range(0, len(train_norm_xs), batch_size): # iterate over each minibatch\n",
        "      # minibatch that we are working with:\n",
        "      X = train_norm_xs[i:(i + batch_size)]\n",
        "      t = train_ts[i:(i + batch_size), 0]\n",
        "\n",
        "      # since len(train_norm_xs) does not divide batch_size evenly, we will skip over\n",
        "      # the \"last\" minibatch\n",
        "      if np.shape(X)[0] != batch_size:\n",
        "        continue\n",
        "\n",
        "      # compute the prediction\n",
        "      y = pred(w, b, X)\n",
        "\n",
        "      # update w and b\n",
        "      dw, db = derivative_cost(X,y,t)\n",
        "      w = w - alpha * dw\n",
        "      b = b - alpha * db\n",
        "      # increment the iteration count\n",
        "      iter += 1\n",
        "    \n",
        "\n",
        "      # compute and plot the *validation* loss and accuracy\n",
        "      if (iter % 10 == 0):\n",
        "        iters.append(iter)\n",
        "        train_cost = cost(pred(w, b, X), t)\n",
        "        \n",
        "\n",
        "        val_y = pred(w, b, val_norm_xs)\n",
        "        val_acc = get_accuracy(val_y, val_ts[:,0])\n",
        "        accuracies.append(val_acc)\n",
        "        val_cost = cost(val_y, val_ts[:,0])\n",
        "        costs.append(val_cost)\n",
        "        #plt.scatter(val_acc, val_cost, c = val_ts[:,0])\n",
        "        \n",
        "        print(\"Iter %d. [Val Acc %.0f%%, Loss %f] [Train Loss %f]\" % (\n",
        "                iter, val_acc * 100, val_cost, train_cost))\n",
        "\n",
        "      if iter >= max_iters:\n",
        "        break\n",
        "  plt.title(\"validation cost\")\n",
        "  plt.plot(iters, costs, label=\"validation Cost\")\n",
        "  plt.xlabel(\"Iterations\")\n",
        "  plt.ylabel(\"Cost\")\n",
        "  plt.show()\n",
        "  plt.title(\"validation Accuracy\")\n",
        "  plt.plot(iters, accuracies, label=\"Accuracy Cost\")\n",
        "  plt.xlabel(\"Iterations\")\n",
        "  plt.ylabel(\"Accuracy\")\n",
        "  plt.show()\n",
        "  return w, b"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "96ry_xUDofgd",
        "colab_type": "text"
      },
      "source": [
        "### Part (f) -- 2 pts\n",
        "\n",
        "Call `run_gradient_descent` with the weights and biases all initialized to zero.\n",
        "Show that if `alpha` is too small, then convergence is slow.\n",
        "Also, show that if `alpha` is too large, then we do not converge at all!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_6r941DYofgd",
        "colab_type": "code",
        "outputId": "08faac91-82bb-483e-ead0-b1aa93bbe434",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1784
        }
      },
      "source": [
        "w0 = np.zeros(90)\n",
        "b0 = 0.\n",
        "run_gradient_descent(w0, b0, 0.01)\n",
        "# Iter 100. [Val Acc 68%, Loss 0.649811] [Train Loss 0.641354]\n",
        "# with the small(alpha = 0.01) alpha our convergence is slow and after 100 iteration we only get to 67% accuracy\n",
        "\n",
        "run_gradient_descent(w0, b0, 0.7)\n",
        "# Iter 100. [Val Acc 66%, Loss 0.992179] [Train Loss 0.857937]\n",
        "# with the larger alpha we have divergent behaviour"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Iter 10. [Val Acc 61%, Loss 0.685134] [Train Loss 0.685606]\n",
            "Iter 20. [Val Acc 64%, Loss 0.680119] [Train Loss 0.674203]\n",
            "Iter 30. [Val Acc 65%, Loss 0.674986] [Train Loss 0.677143]\n",
            "Iter 40. [Val Acc 65%, Loss 0.671401] [Train Loss 0.686716]\n",
            "Iter 50. [Val Acc 67%, Loss 0.667418] [Train Loss 0.677368]\n",
            "Iter 60. [Val Acc 67%, Loss 0.663635] [Train Loss 0.645174]\n",
            "Iter 70. [Val Acc 67%, Loss 0.659751] [Train Loss 0.647840]\n",
            "Iter 80. [Val Acc 67%, Loss 0.656624] [Train Loss 0.669502]\n",
            "Iter 90. [Val Acc 67%, Loss 0.653230] [Train Loss 0.637578]\n",
            "Iter 100. [Val Acc 68%, Loss 0.650219] [Train Loss 0.624228]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY4AAAEWCAYAAABxMXBSAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3deZwU1b3+8c/DDMOqIIsbIKAMKm6I\nIyrI4o6JcQ+KRuOGUTHRuCTqzf3drDeJRkUjalCjMdeNGBeiERQFURRlUJBNdhUQBVlFULbv74+q\nie0IMoPT9Mz08369+gV1urrmW23LM+dU9TmKCMzMzCqqTq4LMDOzmsXBYWZmleLgMDOzSnFwmJlZ\npTg4zMysUhwcZmZWKQ4Os5Sk3pLmZ2xPkdS7Ivtuxc+6W9J/b+3rzXLJwWG2GRGxT0SM+rbHkXSe\npFfLHfuSiPjNtz12tm2qdjMHh5mZVYqDw2oVST+X9Hi5ttsk3Z7+/XxJ0yR9KmmOpB99w7Hek3R0\n+vcGkh6QtEzSVODgcvteJ2l2etypkk5J2/cG7gYOk7RK0vK0/QFJv814fX9JsyQtlTRU0q4Zz4Wk\nSyTNlLRc0iBJ2kzNBZJuyKhlvKQ26XPdJI2TtCL9s1vG685L349PJc2VdPbmajcjIvzwo9Y8gLbA\namC7dLsAWAgcmm5/F9gDENAr3bdL+lxvYH7Gsd4Djk7//gfgFaAZ0AaYXG7f7wO7kvwydgbwGbBL\n+tx5wKvl6nwA+G369yOBT4AuQD3gz8DojH0DeAZoCuwGLAb6bOb8rwUmAXum53gA0DytexlwDlAI\n9Eu3mwONgJXAnukxdgH22VztfvjhHofVKhHxPvAWcEradCSwOiLGps8/GxGzI/Ey8DzQowKH7gv8\nLiKWRsQ84PZyP/cfEfFhRGyMiMeAmUDXCpZ9NvDXiHgrIr4Arif5Lb9dxj5/iIjlEfEBMBLovJlj\nXQT8IiKmp+c4MSKWkATmzIj4e0Ssj4hHgHeB76Wv2wjsK6lBRCyMiCkVrN3ykIPDaqOHSX6jBjgr\n3QZA0vGSxqZDQsuB7wAtKnDMXYF5GdvvZz4p6VxJE9KhpOXAvhU8btmx/3O8iFgFLAFaZezzUcbf\nVwONN3OsNsDsLf2M1PtAq4j4jKSXdAmwUNKzkvaqYO2WhxwcVhv9A+gtqTVJz+NhAEn1gH8CfwJ2\nioimwL9JhnS2ZCHJP8pldiv7i6S2wD3A5UDz9LiTM467pSmoPyQZYis7XiOSIaQFFairvHkkQ3Hf\n+DNSu5X9jIgYHhHHkAxTvUtyPrDl2i0POTis1omIxcAo4H5gbkRMS58qIrmGsBhYL+l44NgKHnYI\ncL2kHdJA+nHGc41I/oFdDMkFeJIeR5mPgdaSijZz7EeA8yV1TsPtf4E3IuK9CtaW6V7gN5KKldhf\nUnOSgOwo6SxJhZLOADoBz0jaSdJJaWB9AawiGbqqSO2WhxwcVls9DBxNxjBVRHwK/IQkBJaRDGMN\nreDxfkUytDOX5LrI3zOOOxW4GXid5B/a/YAxGa99CZgCfCTpk/IHjogRwH+T9IYWkvQYzqxgXeXd\nQnJ+z5Nc8L4PaJBe5zgBuJpkGOxnwAkR8QnJvwNXkfRKlpLcNHBpRWq3/KQI90TNzKzi3OMwM7NK\ncXCYmVmlODjMzKxSHBxmZlYphbkuYFto0aJFtGvXLtdlmJnVKOPHj/8kIlqWb8+L4GjXrh2lpaW5\nLsPMrEaRVH62AcBDVWZmVkkODjMzqxQHh5mZVYqDw8zMKsXBYWZmleLgMDOzSslqcEjqI2l6upby\ndZvZp2+6RvMUSZkL7tyYtk2TdHvZGsuSRqXHnJA+dszmOZiZ2Vdl7XsckgqAQcAxwHxgnKSh6RTU\nZfsUkyyT2T0ilpWFgKRuQHdg/3TXV0mmeh6Vbp8dEVn/YsawyQv5fN1GTj6w1ZZ3NjPLE9n8AmBX\nYFZEzAGQ9ChwEjA1Y5/+wKCIWAYQEYvS9gDqkyy8I6AuyToH20xEMKR0Pi+9u4jZi1fx06M7UqdO\nRRaKMzOr3bI5VNWKr67RPJ+vrqEM0JFkVbIx6TrQfQAi4nVgJMmiNguB4RmruAHcnw5T/XfZEFZ5\nki6WVCqpdPHixZUuXhJ3/+Agzjy4DX9+aRaXP/IWa9ZuqPRxzMxqm1xfHC8EioHeQD/gHklNJXUA\n9gZak4TNkZJ6pK85OyL2A3qkj3M2deCIGBwRJRFR0rLl16ZaqZCiwjr8/tT9+MV39+a5yR9xxuDX\n+Xjl51t1LDOz2iKbwbEAaJOx3TptyzQfGBoR6yJiLjCDJEhOAcZGxKqIWAU8BxwGEBEL0j8/JVkW\ntGsWzwFJXNRjd+49t4TZi1Zx4h2vMnnBimz+SDOzai2bwTEOKJbUPl3o/ky+vr7zUyS9DSS1IBm6\nmgN8APSSVCipLsmF8Wnpdot0/7okayhPzuI5/MdRe+/E45d2o7BOHU6/+zWGTV64LX6smVm1k7Xg\niIj1wOXAcGAaMCQipkj6taQT092GA0skTSW5pnFtRCwBHgdmA5OAicDEiPgXUA8YLukdYAJJD+ae\nbJ1DeXvvsj1PDehOp12255L/e4tBI2fhNdvNLN8oH/7hKykpiaqcVv3zdRv4+T/f4ekJH3Lqga34\n/Wn7Ua+woMqOb2ZWHUgaHxEl5dvzYj2Oqla/bgEDz+hMh5aNufmFGby/dDV/OecgWjSul+vSzMyy\nLtd3VdVYkvjxUcUMOqsLUz5cwcmDxjD9o09zXZaZWdY5OL6l7+6/C0N+dBhr12/ktLteY+S7i7b8\nIjOzGszBUQX2b92Upy/vTtvmDbnwb+O479W5vmhuZrWWg6OK7NKkAf+45DCO7bQzv3lmKjc8OZl1\nGzbmuiwzsyrn4KhCDYsKufPsLgw4Yg8eefMDfvjXN1m+em2uyzIzq1IOjipWp4649ri9uKXvAZS+\nt4xT7nyNOYtX5bosM7Mq4+DIklO7tObh/oewcs06TrnzNV6b9UmuSzIzqxIOjiwqadeMpwZ0Z6ft\n63HuX9/k4Tc+yHVJZmbfmoMjy9o0a8g/L+3G4cUtuOHJSfzqX1PYsNF3XJlZzeXg2Aa2q1+Xe88t\n4YLu7bl/zHtc+LdxfPr5ulyXZWa2VRwc20hhQR3+3/c68btT9uXVmZ9w2l2vMW/p6lyXZWZWaQ6O\nbezsQ9ry4AVd+WjF55w0aAyl7y3NdUlmZpXi4MiBbh1a8NSA7jRpUJez7nmDJ96an+uSzMwqzMGR\nI7u3bMyTl3WjpN0OXDVkIjcOe5eNvmhuZjWAgyOHmjYs4m8XdKVf1924c9RsLn1oPKvXrs91WWZm\n38jBkWN1C+rwv6fsy3+f0IkXpn7M9+9+nYUr1uS6LDOzzXJwVAOSuPDw9tz3w4N5f8lqTrpjDO/M\nX57rsszMNsnBUY0csdeO/PPSbhQV1qHvX17n35MW5rokM7OvyWpwSOojabqkWZKu28w+fSVNlTRF\n0sMZ7TembdMk3S5JaftBkialx/xPe22x587b8dSA7uy7axMue+gt/vziTK/tYWbVStaCQ1IBMAg4\nHugE9JPUqdw+xcD1QPeI2Ae4Mm3vBnQH9gf2BQ4GeqUvuwvoDxSnjz7ZOodcadG4Hg/1P4RTD2zF\nzS/M4MrHJvD5ug25LsvMDMhuj6MrMCsi5kTEWuBR4KRy+/QHBkXEMoCIKFt3NYD6QBFQD6gLfCxp\nF2D7iBgbya/hDwInZ/EccqZeYQE39z2Aa4/bk6cnfMhZ94xlyaovcl2WmVlWg6MVMC9je37alqkj\n0FHSGEljJfUBiIjXgZHAwvQxPCKmpa+fv4VjAiDpYkmlkkoXL15cJSe0rUliwBEduOvsLkz5cCWn\n3PkasxZ5bQ8zy61cXxwvJBlu6g30A+6R1FRSB2BvoDVJMBwpqUdlDhwRgyOiJCJKWrZsWcVlb1vH\n77cLj158KKvXrufUO8fw+uwluS7JzPJYNoNjAdAmY7t12pZpPjA0ItZFxFxgBkmQnAKMjYhVEbEK\neA44LH196y0cs1Y6cLcdePKy7uy0fX3O/esbPD7e05SYWW5kMzjGAcWS2ksqAs4Ehpbb5ymS3gaS\nWpAMXc0BPgB6SSqUVJfkwvi0iFgIrJR0aHo31bnA01k8h2qlTbOGPH5pN7q2b8Y1/5jILS/M8B1X\nZrbNZS04ImI9cDkwHJgGDImIKZJ+LenEdLfhwBJJU0muaVwbEUuAx4HZwCRgIjAxIv6VvuYy4F5g\nVrrPc9k6h+qoSYO63H9eV/qWtOb2F2dy5WMT+GK977gys21H+fAba0lJSZSWlua6jCoVEdw5ajY3\nDZ/Owe124C/nlNCsUVGuyzKzWkTS+IgoKd+e64vjtpXK7rj6c78DmTh/BafeOYa5n3yW67LMLA84\nOGq47x2wK4/0P4SVn6/nlDvH8OZcLwxlZtnl4KgFDmrbjCcv60azRkX84N43eOrtvLjRzMxyxMFR\nS7Rt3ognL+1Ol7ZNufKxCdw2wnNcmVl2ODhqkSYN6/LgBYdwWpfW3DpiBlcPmeg7rsysyhXmugCr\nWkWFdfjT9/enXfOG3PzCDBYsX8NfzjmIpg19x5WZVQ33OGohSfz4qGJuO7Mzb3+wnFPvfI33l/iO\nKzOrGg6OWuykzq14qP8hLFu9llPufI3S93zHlZl9ew6OWu7gds144rLuNGlQl7PufYOhEz/MdUlm\nVsM5OPJA+xaNeOLSbnRu3ZSfPPI2d7zkO67MbOs5OPLEDo2K+PtFXTm586786fkZXPv4O6xdvzHX\nZZlZDeS7qvJIvcICbj2jM22bN+K2F2eyYNka7v7BQTRpWDfXpZlZDeIeR56RxE+P6cjN3z+A0veX\ncupdY5i3dHWuyzKzGsTBkadOO6g1f7/wED5ZtZaTB43hrQ+W5bokM6shHBx57NDdm/PEZd1oVK+Q\nfoPH8u9JC3NdkpnVAA6OPLdHy8Y8eVk39m3VhMseeou7X57tO67M7Bs5OIzmjevx0EWHcML+u/CH\n597lhicnsW6D77gys03zXVUGQP26Bdx+5oG0a96IO0bOYv6yNQw6uwvb1/cdV2b2Ve5x2H/UqSOu\nOW5Pbjx9f16fvYTT73qN+ct8x5WZfVVWg0NSH0nTJc2SdN1m9ukraaqkKZIeTtuOkDQh4/G5pJPT\n5x6QNDfjuc7ZPId81LekDQ9e0JWFKz7n5EGvMXHe8lyXZGbVSNaCQ1IBMAg4HugE9JPUqdw+xcD1\nQPeI2Ae4EiAiRkZE54joDBwJrAaez3jptWXPR8SEbJ1DPuvWoQVPXtaN+nXrcMbg1xk2+aNcl2Rm\n1UQ2exxdgVkRMSci1gKPAieV26c/MCgilgFExKJNHOd04LmI8JjJNtZhx+14akB39tp5ey59aDz3\njJ7jO67MLKvB0QqYl7E9P23L1BHoKGmMpLGS+mziOGcCj5Rr+52kdyTdKqle1ZVs5bVoXI9HLz6U\n4/fdmd/9exr9Hxzvb5qb5blcXxwvBIqB3kA/4B5JTcuelLQLsB8wPOM11wN7AQcDzYCfb+rAki6W\nVCqpdPHixdmpPk/Ur1vAHf26cP3xezFm1iccfcvL3P7iTD5f52VpzfJRNoNjAdAmY7t12pZpPjA0\nItZFxFxgBkmQlOkLPBkR68oaImJhJL4A7icZEvuaiBgcESURUdKyZcsqOJ38VqeO+FGvPXjx6l4c\nvfdO3PLCDI4bOJqR0zc1umhmtVk2g2McUCypvaQikiGnoeX2eYqkt4GkFiRDV3Mynu9HuWGqtBeC\nJAEnA5OzUbxt2q5NGzDo7C7834WHUFBHnH//OPo/WOrhK7M8krXgiIj1wOUkw0zTgCERMUXSryWd\nmO42HFgiaSowkuRuqSUAktqR9FheLnfohyRNAiYBLYDfZuscbPMOL27BsCt68vM+e/HqzGT46s8e\nvjLLC8qHu2RKSkqitLQ012XUWh8uX8Pvnp3Gs5MW0rZ5Q3554j4cseeOuS7LzL4lSeMjoqR8e64v\njlstUDZ89fcLu/5n+OpiD1+Z1VoODqsyPYpb/mf46hUPX5nVWg4Oq1JFhXW4tHdy99VRe+/Izb77\nyqzWcXBYVuzatAF3nn1QMnwlD1+Z1SYODsuqHsUtee7KHvysz54evjKrJRwclnX1Cgu4rHcHD1+Z\n1RIODttmPHxlVjs4OGyb8/CVWc3m4LCc2NTwVR8PX5nVCA4Oy6nM4as6Hr4yqxEcHFYtlB++OuZW\nD1+ZVVcODqs2yoavRlzdiyP3+nL4apSHr8yqFQeHVTut0uGrBy9Ihq/O8/CVWbXi4LBqq2fHrw9f\n3fHSTL5Y7+Ers1xycFi1Vn746k/Pz+C4W0czds6SXJdmlrccHFYjZA5fBXDm4LH8z9OTWb12fa5L\nM8s7Dg6rUXp2bMlzV/TgvG7t+Nvr79Nn4CvufZhtYw4Oq3EaFhXyyxP34bGLD0Vy78NsW3NwWI11\nyO7N3fswywEHh9Vo7n2YbXtZDQ5JfSRNlzRL0nWb2aevpKmSpkh6OG07QtKEjMfnkk5On2sv6Y30\nmI9JKsrmOVjN4N6H2baTteCQVAAMAo4HOgH9JHUqt08xcD3QPSL2Aa4EiIiREdE5IjoDRwKrgefT\nl/0RuDUiOgDLgAuzdQ5Ws7j3YbZtZLPH0RWYFRFzImIt8ChwUrl9+gODImIZQERsam6J04HnImK1\nJJEEyePpc38DTs5K9VZjufdhll3ZDI5WwLyM7flpW6aOQEdJYySNldRnE8c5E3gk/XtzYHlElP0K\nualjAiDpYkmlkkoXL1681SdhNVNm7wPc+zCrSrm+OF4IFAO9gX7APZKalj0paRdgP2B4ZQ8cEYMj\noiQiSlq2bFlF5VpNc8juzRl2pXsfZlUpm8GxAGiTsd06bcs0HxgaEesiYi4wgyRIyvQFnoyIden2\nEqCppMJvOKbZV7j3YVa1shkc44Di9C6oIpIhp6Hl9nmKpLeBpBYkQ1dzMp7vx5fDVEREACNJrnsA\n/BB4OhvFW+3j3odZ1chacKTXIS4nGWaaBgyJiCmSfi3pxHS34cASSVNJAuHaiFgCIKkdSY/l5XKH\n/jlwlaRZJNc87svWOVjt496H2ben5Jf4Lewk/T0iztlSW3VVUlISpaWluS7DqpnVa9dz47DpPPDa\ne+zWrCE3nr4/h+7ePNdlmVUbksZHREn59or2OPYpd7AC4KCqKMwsV9z7MNs63xgckq6X9Cmwv6SV\n6eNTYBG+tmC1hK99mFXONwZHRPw+IrYDboqI7dPHdhHRPCKu30Y1mmWdex9mFVfRoapnJDUCkPQD\nSbdIapvFusxywr0Psy2raHDcBayWdABwNTAbeDBrVZnlkHsfZt+sosGxPv0OxUnAHRExCNgue2WZ\n5Z57H2abVtHg+FTS9cA5wLOS6gB1s1eWWfXg3ofZ11U0OM4AvgAuiIiPSKb6uClrVZlVM+59mH2p\nQsGRhsVDQBNJJwCfR4SvcVhe2VTv4/onJrFizbotvNKsdqlQcEjqC7wJfJ9k4sE3JJ3+za8yq53K\neh/9e7TnsXEfcPQtL/PsOwupyCwMZrVBRaccmQgcU7bQkqSWwIiIOCDL9VUJTzli2TJp/gque+Id\npny4kqP22pHfnLwvuzZtkOuyzKrEt51ypE651fmWVOK1ZrXWfq2b8PSA7vzXd/bmtdlLOOaWl7l/\nzFw2bHTvw2qviv7jP0zScEnnSToPeBb4d/bKMqs5Cgvq0L/n7jz/056UtGvGr/41lVPvHMPUD1fm\nujSzrNjSXFUdJHWPiGuBvwD7p4/XgcHboD6zGqNNs4Y8cP7B3HZmZ+YvW8P37niVPzz3LmvWbsh1\naWZVaks9joHASoCIeCIiroqIq4An0+fMLIMkTurcihev7sVpXVpx98uzOW7gaF6Z6XXvrfbYUnDs\nFBGTyjembe2yUpFZLdC0YRE3nn4AD/c/hII64pz73uSqxyaw9LO1uS7N7FvbUnA0/YbnfOuI2RZ0\n26MFz13Rgx8f2YGhEz/kqJtH8cRb833rrtVoWwqOUkn9yzdKuggYn52SzGqX+nULuPrYPXn2Jz1o\n16IRVw2ZyDn3vcn7Sz7LdWlmW+Ubv8chaSeS6xlr+TIoSoAi4JT0G+XVnr/HYdXFxo3BQ2+8zx+H\nTWfdho1ceXRHLurRnroFvrvdqp+t+h5HRHwcEd2AXwHvpY9fRcRhFQkNSX0kTZc0S9J1m9mnr6Sp\nkqZIejijfTdJz0ualj7fLm1/QNJcSRPSR+ct1WFWXdSpI845rB0jrupFr44t+eOwd/nen19lwrzl\nuS7NrMIq9M3xrTpwsi75DOAYYD4wDugXEVMz9ikGhgBHRsQySTtmfDt9FPC7iHhBUmNgY0SslvQA\n8ExEPF7RWtzjsOpq2OSP+J+hk1n06Rec160dVx+7J43rFea6LDPg239zfGt0BWZFxJyIWAs8SrKe\nR6b+wKCIWAaQERqdgMKIeCFtXxURq7NYq1lO9Nl3Z164qhc/OKQtD7z2Hsfe8jIvTvs412WZfaNs\nBkcrYF7G9vy0LVNHoKOkMZLGSuqT0b5c0hOS3pZ0U9qDKfM7Se9IulVSvU39cEkXSyqVVLp4se+h\nt+pr+/p1+c3J+/L4JYfRuH4hF/6tlAEPvcWilZ/nujSzTcr1FblCoBjoDfQD7pHUNG3vAVwDHAzs\nDpyXvuZ6YK+0vRnw800dOCIGR0RJRJS0bNkyi6dgVjUOatuMZ37cg2uO7cgL0z7mqFte5uE3PmCj\n572yaiabwbEAaJOx3TptyzQfGBoR6yJiLsk1keK0fUI6zLUeeAroAhARCyPxBXA/yZCYWa1QVFiH\ny48sZtgVPdhn1+254clJnDH4dWYt+jTXpZn9RzaDYxxQLKm9pCLgTGBouX2eIultIKkFyRDVnPS1\nTdPp2wGOBKam++2S/ingZGByFs/BLCd2b9mYR/ofyo2n7c+Mj1fxndteZeCIGXyx3vNeWe5lLTjS\nnsLlwHBgGjAkIqZI+rWkE9PdhgNLJE0FRgLXRsSSiNhAMkz1oqRJgIB70tc8lLZNAloAv83WOZjl\nkiT6HtyGF6/uRZ99d2bgiJl857ZXeHPu0lyXZnkua7fjVie+Hddqg5HTF/GLJyezYPka+nXdjeuO\n34smDermuiyrxXJxO66ZVaEj9tyRF67q6SVrLeccHGY1SMOiQv7ru514esDh7LhdPQY8/Bb9Hyxl\n4Yo1uS7N8oiDw6wGylyy9tVZn3DsLaN9665tMw4OsxqqbMna4Vf2ZN9WTbjhyUmcde9Yz7prWefg\nMKvh2jZvxMP9D+H3p+7HlAUrOW7gaO59ZQ4b3PuwLHFwmNUCkujXdTdeuKoXh3dowW+fncapd73G\n9I/8xUGreg4Os1pk5yb1uefcEm7vdyDzlq7mhD+/wsARM1i7fmOuS7NaxMFhVstI4sQDdmXEVb34\nzn67MHDETL7351eZ6DU/rIo4OMxqqWaNirjtzAO574clrFizjlPuHMPvnp3KmrWetsS+HQeHWS13\n1N478fxVPTmz627c88pc+tw2mtdnL8l1WVaDOTjM8sD29evyv6fsx8P9DwGg3z1juf6JSaz8fF2O\nK7OayMFhlke67dGCYVf05OKeu/PYuA849pbRvPSuVxy0ynFwmOWZBkUF3PCdvXnisu40aVCXCx4o\n5YpH32bJqi9yXZrVEA4OszzVuU1T/vXjw7ny6GL+PWkhx9w6mqETP/SkibZFDg6zPFZUWIcrj+7I\nMz/uQZtmDfnJI2/T/8FSPlrh9c5t8xwcZsaeO2/HE5d24xffTSZNPOaWl3nkzQ/c+7BNcnCYGQAF\ndcRFPb6cNPH6JyZx1j1veNJE+xoHh5l9ReakiZMXrPCkifY1Dg4z+5qySROfv6on3fdIJk087a7X\nmPGxJ020LAeHpD6SpkuaJem6zezTV9JUSVMkPZzRvpuk5yVNS59vl7a3l/RGeszHJBVl8xzM8tku\nTRpw7w9LuO3MznywdDXfvf0Vbhsx05Mm5rmsBYekAmAQcDzQCegnqVO5fYqB64HuEbEPcGXG0w8C\nN0XE3kBXYFHa/kfg1ojoACwDLszWOZhZ0vs4qXMrXvhpT76z3y7cOmIGJ97hSRPzWTZ7HF2BWREx\nJyLWAo8CJ5Xbpz8wKCKWAUTEIoA0YAoj4oW0fVVErJYk4Ejg8fT1fwNOzuI5mFmqeeN63Hbmgdx7\nbgnLVyeTJv7vv6d50sQ8lM3gaAXMy9ien7Zl6gh0lDRG0lhJfTLal0t6QtLbkm5KezDNgeURsf4b\njmlmWXR0py8nTRw8eg7H3zaasXM8aWI+yfXF8UKgGOgN9APukdQ0be8BXAMcDOwOnFeZA0u6WFKp\npNLFixdXZc1meS9z0sQAzhw8lmv+MZEFy9fkujTbBrIZHAuANhnbrdO2TPOBoRGxLiLmAjNIgmQ+\nMCEd5loPPAV0AZYATSUVfsMxAYiIwRFREhElLVu2rLKTMrMvlU2a+KNeuzN04occcdMofjl0Cos/\n9bxXtVk2g2McUJzeBVUEnAkMLbfPUyS9DSS1IBmimpO+tqmksn/xjwSmRvI11pHA6Wn7D4Gns3gO\nZrYFDYoKuP74vRl1TW9OO6gVfx/7Pj1vHMlNw99lxWpP214bZS040p7C5cBwYBowJCKmSPq1pBPT\n3YYDSyRNJQmEayNiSURsIBmmelHSJEDAPelrfg5cJWkWyTWP+7J1DmZWcbs2bcDvT92fEVf14uhO\nOzFo5Gx63PgSg0bOYvXa9Vs+gNUYyoe5aEpKSqK0tDTXZZjllakfruTm56fz4ruLaNG4HpcfsQf9\nDtmNeoUFuS7NKkjS+Igo+Vq7g8PMsmn8+0u5cdh03pi7lFZNG3DF0cWcemArCgtyfW+ObcnmgsP/\n5cwsqw5q24xHLz6Uv1/YleaNi/jZ4+9w7MDRPPvOQjZ6/qsaycFhZlkniR7FLXl6QHfu/sFBFEgM\nePgtvnfHq4ycvsjTt9cwDg4z22Yk0WffnRl2ZU9u6XsAKz9fx/n3j6PvX17nzblLc12eVZCvcZhZ\nzqxdv5HHSufx5xdnsujTL+jVsSXXHrcn+7ZqkuvSDF8cd3CYVWNr1m7gwdff466XZ7N89Tq+s9/O\nXHVMRzrsuF2uS8trDg4Hh/zb5GQAAA8KSURBVFm1t/Lzddz7ylzue2UOa9Zt4NQurbniqGLaNGuY\n69LykoPDwWFWYyxZ9QV3jZrNg2PfJyI4q+tuDDiyAztuVz/XpeUVB4eDw6zGWbhiDbe/OIshpfMo\nKqjDed3bcUnPPWjSsG6uS8sLDg4Hh1mN9d4nn3HriBkMnfghjesVckmvPTivWzsa1Svc8ottqzk4\nHBxmNd60hSu5+fkZjJj2MS0aFzHgiA6c5WlMssbB4eAwqzXe+mAZNw2bzutzlrBrk/pceXRHTu3i\naUyqmqccMbNao8tuO/DIxYfy0EWH0HL7+vzsn+9w7K2j+dfEDz2NyTbg4DCzGqt7hxY8dVk3Bp9z\nEHUL6vDjR97m5DvHMO49fws9mxwcZlajSeLYfXbm31f04Ja+B7Bo5Rd8/+7XGfDQW8xbujrX5dVK\nDg4zqxUK6ohTu7TmpWt6ceXRxbz07iKOuuVlbhz2Lqu+8EJSVcnBYWa1SsOiQq48uiMvXdOLE/bb\nhTtHzab3TaN49M0P2ODrH1XCwWFmtdIuTRpwyxmdeWpAd9o2b8h1T0zihD+/ymuzP8l1aTWeg8PM\narXObZry+CWHccdZB7JyzTrOuucNLn6wlPc++SzXpdVYDg4zq/UkccL+u/Li1b249rg9GTPrE465\n9WV+9+xUVqxZl+vyapysBoekPpKmS5ol6brN7NNX0lRJUyQ9nNG+QdKE9DE0o/0BSXMznuuczXMw\ns9qjft0CBhzRgZHX9ubUA1tz76tzOeJPo/j72PdZv2FjrsurMbL2zXFJBcAM4BhgPjAO6BcRUzP2\nKQaGAEdGxDJJO0bEovS5VRHReBPHfQB4JiIer2gt/ua4mW3K5AUr+O2zUxk7Zykdd2rML77biZ4d\nW+a6rGojF98c7wrMiog5EbEWeBQ4qdw+/YFBEbEMoCw0zMy2hX1bNeGR/ofyl3MO4ov1Gzn3r29y\n/v1vMmvRqlyXVq1lMzhaAfMytuenbZk6Ah0ljZE0VlKfjOfqSypN208u97rfSXpH0q2S6m3qh0u6\nOH196eLFi7/1yZhZ7SSJ4/bZmed/2pMbvrMXpe8t47iBo/nl0Cks+2xtrsurlnJ9cbwQKAZ6A/2A\neyQ1TZ9rm3aRzgIGStojbb8e2As4GGgG/HxTB46IwRFREhElLVu662lm36xeYQEX99yDUdf2pl/X\nNjz4+nv0/tMo/vrqXNb5+sdXZDM4FgBtMrZbp22Z5gNDI2JdRMwluSZSDBARC9I/5wCjgAPT7YWR\n+AK4n2RIzMysSjRvXI/fnrwfz13Rk/1bN+HXz0zluIGjeXHax+TDbOIVkc3gGAcUS2ovqQg4Exha\nbp+nSHobSGpBMnQ1R9IOZUNQaXt3YGq6vUv6p4CTgclZPAczy1N77rwdD17Qlb+el1wbvvBvpZz7\n1zeZ/tGnOa4s97IWHBGxHrgcGA5MA4ZExBRJv5Z0YrrbcGCJpKnASODaiFgC7A2USpqYtv8h426s\nhyRNAiYBLYDfZusczCy/SeLIvXZi+JU9+eX3OvHO/BUcf9to/uvJSSxZ9UWuy8sZL+RkZlZBy1ev\nZeCImfzf2PdpULeAy4/swHnd29XaFQi9kJOZ2bfUtGERvzxxH4b/tCdd2zfj98+9yzG3jGbY5I/y\n6vqHg8PMrJL2aNmY+847mL9f2JUGdQu45P/Gc+bgsUxesCLXpW0TDg4zs63Uo7glz/7kcH578r7M\nXLSK793xKj97fCKLVn6e69Kyytc4zMyqwIo16xg0chb3j5lLUUEdzu/enot6tKdpw6Jcl7bVNneN\nw8FhZlaF3l/yGTcOn86z7yxku3qFnH94ey48vD1NGtTNdWmV5uBwcJjZNvTuRyu5bcRMnpv8EdvV\nL+TCw9tzweHt2b5+zQkQB4eDw8xyYOqHK7ntxRkMn/Ix29cv5KIeu3N+93ZsVwMCxMHh4DCzHJry\n4QoGjpjJC1M/pkmDuvTv0Z7zurencb3CXJe2WQ4OB4eZVQOTF6xg4IgZjJi2iKYN69K/x+78sFu7\nahkgDg4Hh5lVI+/MX87AETN56d1F7NCwLhf33INzD2tLo2oUIA4OB4eZVUMT5i1n4IgZjJq+mGaN\nivhRz90557C2NCzKfYA4OBwcZlaNvfXBMgaOmMnoGYtp0biIH/Xcgx8c2pYGRbmbB8vB4eAwsxpg\n/PtLGThiJq/M/IQWjetxae89OPuQ3ahfd9sHiIPDwWFmNci495YycMQMxsxawo7bJQHSr+u2DRAH\nh4PDzGqgN+YsYeCImbw+Zwk7bV+Py3p34IyD22yTAHFwODjMrAZ7ffYSbh0xgzfnLmXn7esz4Ig9\n6Htwm6yuBeLgcHCYWQ0XEf8JkHHvLWPXJvW57IgO9C1pQ1Fh1U927uBwcJhZLRERjJmVBMj495fR\nqmkDBhzRgdMPal2lAeLgcHCYWS0TEbwy8xNuHTGDtz9YTusdGnD5ER047aDW1C349gGSk6VjJfWR\nNF3SLEnXbWafvpKmSpoi6eGM9g2SJqSPoRnt7SW9kR7zMUk1d7J7M7NvQRI9O7bkiUu78cD5B9O8\ncT2ue2ISR948iiHj5rFuw8bs/Nxs9TgkFQAzgGOA+cA4oF9ETM3YpxgYAhwZEcsk7RgRi9LnVkVE\n400cdwjwREQ8KuluYGJE3PVNtbjHYWb5ICIYNX0xt46YwTvzV9C2eUMGn1PCnjtvt1XHy0WPoysw\nKyLmRMRa4FHgpHL79AcGRcQygLLQ2BxJAo4EHk+b/gacXKVVm5nVUJI4Yq8deXpAd+77YQltmzei\nTbMGVf5zshkcrYB5Gdvz07ZMHYGOksZIGiupT8Zz9SWVpu1l4dAcWB4R67/hmABIujh9fenixYu/\n/dmYmdUQkjhq75148IKuWZnzKtezaBUCxUBvoDUwWtJ+EbEcaBsRCyTtDrwkaRKwoqIHjojBwGBI\nhqqqvHIzszyVzR7HAqBNxnbrtC3TfGBoRKyLiLkk10SKASJiQfrnHGAUcCCwBGgqqfAbjmlmZlmU\nzeAYBxSnd0EVAWcCQ8vt8xRJbwNJLUiGruZI2kFSvYz27sDUSK7kjwROT1//Q+DpLJ6DmZmVk7Xg\nSK9DXA4MB6YBQyJiiqRfSzox3W04sETSVJJAuDYilgB7A6WSJqbtf8i4G+vnwFWSZpFc87gvW+dg\nZmZf5y8AmpnZJuXkC4BmZlb7ODjMzKxSHBxmZlYpeXGNQ9Ji4P1c1/EttQA+yXUR1YTfi6/y+/FV\nfj++9G3fi7YR0bJ8Y14ER20gqXRTF6nykd+Lr/L78VV+P76UrffCQ1VmZlYpDg4zM6sUB0fNMTjX\nBVQjfi++yu/HV/n9+FJW3gtf4zAzs0pxj8PMzCrFwWFmZpXi4KhmJLWRNDJjHfYr0vZmkl6QNDP9\nc4dc17otSSqQ9LakZ9LtvF17XlJTSY9LelfSNEmH5evnQ9JP0/9PJkt6RFL9fPpsSPqrpEWSJme0\nbfKzoMTt6fvyjqQuW/tzHRzVz3rg6ojoBBwKDJDUCbgOeDEiioEX0+18cgXJLMtl/gjcGhEdgGXA\nhTmpKjduA4ZFxF7AASTvS959PiS1An4ClETEvkAByfIN+fTZeADoU65tc5+F40nWOyoGLgbu2tof\n6uCoZiJiYUS8lf79U5J/FFqRrNf+t3S3vFprXVJr4LvAvel23q49L6kJ0JN0OYGIWJuumJmvn49C\noEG6uFtDYCF59NmIiNHA0nLNm/ssnAQ8GImxJIvi7bI1P9fBUY1Jakey8uEbwE4RsTB96iNgpxyV\nlQsDgZ8BG9PtCq89Xwu1BxYD96dDd/dKakQefj7SVUL/BHxAEhgrgPHk72ejzOY+C62AeRn7bfV7\n4+CopiQ1Bv4JXBkRKzOfS1dCzIv7qCWdACyKiPG5rqWaKAS6AHdFxIHAZ5QblsqXz0c6dn8SSZju\nCjTi68M2eS1bnwUHRzUkqS5JaDwUEU+kzR+XdSvTPxflqr5trDtwoqT3gEdJhiFuI3/Xnp8PzI+I\nN9Ltx0mCJB8/H0cDcyNicUSsA54g+bzk62ejzOY+CwuANhn7bfV74+CoZtLx+/uAaRFxS8ZTQ0nW\nWIc8Wms9Iq6PiNYR0Y7kwudLEXE2ebr2fER8BMyTtGfadBQwlfz8fHwAHCqpYfr/Tdl7kZefjQyb\n+ywMBc5N7646FFiRMaRVKf7meDUj6XDgFWASX47p30BynWMIsBvJFPF9I6L8RbFaTVJv4JqIOEHS\n7iQ9kGbA28APIuKLXNa3rUjqTHKjQBEwBzif5JfAvPt8SPoVcAbJ3YhvAxeRjNvnxWdD0iNAb5Lp\n0z8G/gd4ik18FtJwvYNkOG81cH5EbNWa2g4OMzOrFA9VmZlZpTg4zMysUhwcZmZWKQ4OMzOrFAeH\nmZlVioPDbAskrUr/bCfprCo+9g3ltl+ryuObZYODw6zi2gGVCo6MbzBvzleCIyK6VbIms23OwWFW\ncX8AekiakK4DUSDpJknj0vUNfgTJFxUlvSJpKMk3mZH0lKTx6doRF6dtfyCZ2XWCpIfStrLejdJj\nT5Y0SdIZGccelbEex0PpF7uQ9Acl67i8I+lP2/zdsbyxpd+GzOxL15F+cx0gDYAVEXGwpHrAGEnP\np/t2AfaNiLnp9gXpt3cbAOMk/TMirpN0eUR03sTPOhXoTLLeRov0NaPT5w4E9gE+BMYA3SVNA04B\n9oqIkNS0ys/eLOUeh9nWO5Zk7p8JJFPCNCdZJAfgzYzQAPiJpInAWJKJ5or5ZocDj0TEhoj4GHgZ\nODjj2PMjYiMwgWQIbQXwOXCfpFNJppQwywoHh9nWE/DjiOicPtpHRFmP47P/7JTMsXU0cFhEHEAy\nf1L9b/FzM+dd2gAUputPdCWZLfcEYNi3OL7ZN3JwmFXcp8B2GdvDgUvTafCR1DFdVKm8JsCyiFgt\naS+SJYHLrCt7fTmvAGek11Fakqz69+bmCkvXb2kSEf8GfkoyxGWWFb7GYVZx7wAb0iGnB0jWBWkH\nvJVeoF7MppcpHQZckl6HmE4yXFVmMPCOpLfS6eLLPAkcBkwkWYjnZxHxURo8m7Id8LSk+iQ9oau2\n7hTNtsyz45qZWaV4qMrMzCrFwWFmZpXi4DAzs0pxcJiZWaU4OMzMrFIcHGZmVikODjMzq5T/D+II\n818UPAC0AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Iter 10. [Val Acc 66%, Loss 0.642400] [Train Loss 0.536999]\n",
            "Iter 20. [Val Acc 70%, Loss 0.615103] [Train Loss 0.495499]\n",
            "Iter 30. [Val Acc 69%, Loss 0.626553] [Train Loss 0.533318]\n",
            "Iter 40. [Val Acc 69%, Loss 0.618986] [Train Loss 0.533137]\n",
            "Iter 50. [Val Acc 66%, Loss 0.656414] [Train Loss 0.548614]\n",
            "Iter 60. [Val Acc 70%, Loss 0.616538] [Train Loss 0.457618]\n",
            "Iter 70. [Val Acc 70%, Loss 0.603688] [Train Loss 0.403740]\n",
            "Iter 80. [Val Acc 71%, Loss 0.600738] [Train Loss 0.528663]\n",
            "Iter 90. [Val Acc 72%, Loss 0.592351] [Train Loss 0.540519]\n",
            "Iter 100. [Val Acc 71%, Loss 0.597455] [Train Loss 0.452179]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nY0yL/j+eOHZyA8NAaAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 1.30618933, -0.85339396, -0.16936671, -0.07999777, -0.05437552,\n",
              "        -0.64987596,  0.16170758, -0.20425021, -0.15571121, -0.02440948,\n",
              "         0.01045581, -0.00131396,  0.35666226,  0.2855781 , -0.26441644,\n",
              "         0.24067867,  0.06099652,  0.17420141,  0.12037141,  0.14616511,\n",
              "         0.1294179 ,  0.0625668 ,  0.20091552, -0.0368605 , -0.09456612,\n",
              "        -0.00239092,  0.1976744 , -0.10606122, -0.09247652,  0.06830472,\n",
              "        -0.03999028, -0.08209485, -0.1131042 ,  0.01021546,  0.02172563,\n",
              "        -0.23015367, -0.12348914,  0.08461634,  0.2496653 ,  0.05572831,\n",
              "        -0.15517737,  0.06071397, -0.11359943, -0.03414123,  0.15275658,\n",
              "         0.07388447, -0.07492736, -0.18449006, -0.04874641, -0.12823264,\n",
              "         0.04553569,  0.08325951,  0.10096493,  0.01002625, -0.08176204,\n",
              "         0.00673103, -0.0934301 ,  0.14434314, -0.1889441 ,  0.05396299,\n",
              "         0.04009636, -0.02449904, -0.16969802,  0.1566865 , -0.01132711,\n",
              "        -0.05936219, -0.03939826,  0.03814278, -0.1539271 ,  0.03684641,\n",
              "        -0.00940831,  0.03693262, -0.01722457,  0.10352953,  0.18651912,\n",
              "         0.14124559, -0.05556268, -0.19190949, -0.13411244, -0.01416851,\n",
              "        -0.02198678, -0.02180582,  0.07783614,  0.05021794,  0.12287181,\n",
              "        -0.0709152 ,  0.01090149, -0.27402458,  0.02642585,  0.06162524]),\n",
              " 0.34285513639567544)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yGPkoXKwofgf",
        "colab_type": "text"
      },
      "source": [
        "### Part (g) -- 2 pts\n",
        "\n",
        "Find the optimial value of ${\\bf w}$ and $b$ using your code. Explain how you chose\n",
        "the learning rate $\\alpha$ and the batch size."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pQ83XPUcofgg",
        "colab_type": "code",
        "outputId": "8eda8777-cccf-48b5-a72d-eea396eda2a8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1013
        }
      },
      "source": [
        "w0 = np.zeros(90)\n",
        "b0 = 0.\n",
        "w, b = run_gradient_descent(w0, b0, 0.25, 1000)\n",
        "print(w, b)\n",
        "#we chose our alpha and batch size by testing different values of both and we saw that the combination\n",
        "#of alpha = 0.25 and size 1000 batch gives us the highest accuracy and lowest cost."
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Iter 10. [Val Acc 69%, Loss 0.623010] [Train Loss 0.615788]\n",
            "Iter 20. [Val Acc 70%, Loss 0.603460] [Train Loss 0.614957]\n",
            "Iter 30. [Val Acc 71%, Loss 0.592211] [Train Loss 0.595573]\n",
            "Iter 40. [Val Acc 72%, Loss 0.585168] [Train Loss 0.568773]\n",
            "Iter 50. [Val Acc 72%, Loss 0.579625] [Train Loss 0.577991]\n",
            "Iter 60. [Val Acc 73%, Loss 0.575188] [Train Loss 0.578412]\n",
            "Iter 70. [Val Acc 73%, Loss 0.572485] [Train Loss 0.565620]\n",
            "Iter 80. [Val Acc 73%, Loss 0.569745] [Train Loss 0.564885]\n",
            "Iter 90. [Val Acc 73%, Loss 0.568801] [Train Loss 0.579040]\n",
            "Iter 100. [Val Acc 73%, Loss 0.566835] [Train Loss 0.556126]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nEoeIiNTK/wc3UObINP+PxAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "[ 0.88254964 -0.55293224 -0.14182798 -0.15531477 -0.02736676 -0.37009695\n",
            "  0.08950368 -0.11720131 -0.08430985 -0.02125334 -0.03650364 -0.038367\n",
            "  0.10237803  0.1081202  -0.0557064   0.16550554  0.0041405   0.11966606\n",
            "  0.11821464  0.2016022   0.04596182  0.0829602   0.16185989  0.0621818\n",
            " -0.01974762  0.01273427  0.09183523  0.01806672  0.01423543  0.04792399\n",
            " -0.01506578 -0.00656999 -0.08848863  0.01609178 -0.01158226 -0.06407324\n",
            " -0.04315147  0.08962173  0.10472873 -0.05359312 -0.14847416 -0.02986822\n",
            " -0.02596681 -0.01363966 -0.00991942 -0.00404159  0.04584432 -0.04036369\n",
            " -0.01842491  0.00326364  0.00948754 -0.0290432   0.06087815 -0.01419339\n",
            " -0.06124791 -0.02360189 -0.1048076   0.07058676 -0.05971088 -0.04589398\n",
            " -0.03088545 -0.03115213 -0.14580032  0.05082438 -0.09734975 -0.01216264\n",
            "  0.04127697  0.01647062 -0.07189809  0.01704617 -0.03279007 -0.01285709\n",
            "  0.04171936  0.06712105  0.01515744  0.00419793 -0.0325798  -0.08894039\n",
            " -0.04362196 -0.02800377 -0.02270651  0.05732721  0.08425147  0.02129124\n",
            "  0.08135023 -0.0911431   0.04081876 -0.12130689 -0.03885113 -0.00691792] 0.26837907122751276\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XRS4uEdxofgk",
        "colab_type": "text"
      },
      "source": [
        "### Part (h) -- 4 pts\n",
        "\n",
        "Using the values of `w` and `b` from part (g), compute your training accuracy, validation accuracy,\n",
        "and test accuracy. Are there any differences between those three values? If so, why?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u9q3xK1qofgm",
        "colab_type": "code",
        "outputId": "b6b6e9d5-8f7e-42fa-8d9a-d74d563f6926",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        }
      },
      "source": [
        "print(\"for optimal values of w and b from our model we have:\")\n",
        "print(\"training accuracy is: \", get_accuracy(pred(w, b, train_norm_xs), train_ts))\n",
        "print(\"validation accuracy is: \", get_accuracy(pred(w, b, val_norm_xs), val_ts))\n",
        "print(\"testing accuracy is: \", get_accuracy(pred(w, b, test_norm_xs), test_ts))\n",
        "#We see that the training accuracy is the highest since we used the training\n",
        "#data to build our model. Then we see that the validation accuracy is the\n",
        "#second highest since it has overlapping artists with the trainig set. And we\n",
        "#see that the test accuracy is the lowest since our model has never seen it before."
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "for optimal values of w and b from our model we have:\n",
            "training accuracy is:  0.7273364514218725\n",
            "validation accuracy is:  0.72946\n",
            "testing accuracy is:  0.7200464846019756\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "gBS1Ar2Qz-Rm"
      },
      "source": [
        "### Part (i) -- 4 pts\n",
        "\n",
        "Writing a classifier like this is instructive, and helps you understand what happens when\n",
        "we train a model. However, in practice, we rarely write model building and training code\n",
        "from scratch. Instead, we typically use one of the well-tested libraries available in a package.\n",
        "\n",
        "Use `sklearn.linear_model.LogisticRegression` to build a linear classifier, and make predictions about the test set. Start by reading the\n",
        "[API documentation here](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html).\n",
        "\n",
        "Compute the training, validation and test accuracy of this model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ghXt09TMofgr",
        "colab_type": "code",
        "outputId": "2ceff521-f6da-40ef-a39d-c082c83c6d2b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84
        }
      },
      "source": [
        "import sklearn.linear_model\n",
        "model = sklearn.linear_model.LogisticRegression()\n",
        "model.fit(train_norm_xs, train_ts[:,0])\n",
        "print(\"using LogisticRegression in sklearn we have:\")\n",
        "print(\"training accuracy: \", model.score(train_norm_xs, train_ts[:,0]))\n",
        "print(\"validation accuracy: \", model.score(val_norm_xs, val_ts[:,0]))\n",
        "print(\"test accuracy: \", model.score(test_norm_xs, test_ts[:,0]))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "using LogisticRegression in sklearn we have:\n",
            "training accuracy:  0.7327580580834633\n",
            "validation accuracy:  0.73412\n",
            "test accuracy:  0.7267092775518109\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YsujV1F7ofgt",
        "colab_type": "text"
      },
      "source": [
        "## Part 3. Nearest Neighbour\n",
        "\n",
        "We will compare the nearest neighbour model with the model we built in the earlier parts.\n",
        "\n",
        "To make predictions for a new data point using k-nearest neighbour, we will need to:\n",
        "\n",
        "1. Compute the distance from this new data point to every element in the training set\n",
        "2. Select the top $k$ closest neighbour in the training set\n",
        "3. Find the most common label among those neighbours\n",
        "\n",
        "We'll use the validation test to select $k$. That is, we'll select the $k$ that gives the highest\n",
        "validation accuracy.\n",
        "\n",
        "Since we have a fairly large data set, computing the distance between a point in the validation\n",
        "set and all points in the training set will require more RAM than Google Colab provides.\n",
        "To make the comptuations tractable, we will:\n",
        "\n",
        "1. Use only a subset of the training set (only the first 100,000 elements)\n",
        "2. Use only a subset of the validation set (only the first 1000 elements)\n",
        "3. We will use the **cosine similarity** rather than Euclidean distance. We will also pre-scale\n",
        "   each element in training set and the validation set to be a unit vector, so that computing\n",
        "   the cosine similarity is equivalent to computing the dot product. To see this, recall that \n",
        "   $$cos(\\theta) = \\frac{v \\cdot w}{||v|| ||w||}$$. But if both ||v|| and ||w|| are zero, then\n",
        "   only the dot product remains."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2NjIruADofgt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# we'll need to take the first 100000 element of `train_norm_xs`\n",
        "# and scale each of its rows to be unit length\n",
        "xs = train_norm_xs[:100000]\n",
        "# compute the norms:\n",
        "norms = np.linalg.norm(xs, axis=1)\n",
        "# divide the xs by the norms. Because of numpy's broadcasting rules, we need to\n",
        "# transpose the matrices a couple of times:\n",
        "#   https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html\n",
        "xs = (xs.T / norms).T"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SQpl3wp-ofgv",
        "colab_type": "text"
      },
      "source": [
        "### Part (a) -- 1 pt\n",
        "\n",
        "Create a numpy matrix `val_xs` that contains the first 1000 elements of `val_norm_xs`, scaled\n",
        "so that each of its rows is unit length. Follow the code above."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W4aNVP-uofgw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "val_xs = val_norm_xs[:1000]\n",
        "norms = np.linalg.norm(val_xs, axis=1)\n",
        "val_xs = (val_xs.T / norms).T"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pIkSPTYMofgx",
        "colab_type": "text"
      },
      "source": [
        "### Part (b) -- 1 pt\n",
        "\n",
        "Our goal now is to compute the validation accuracy for a choice of $k$. This will\n",
        "require computing the distance between each song in the training set and each\n",
        "song in the validation set.\n",
        "\n",
        "This is actually quite straightforward, and can be done using one matrix\n",
        "computation operation!\n",
        "\n",
        "Compute all the distances between elements of `xs` and those of `val_xs`\n",
        "using a single call to `np.dot`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lqkn4Ghuofgx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "val_distances = np.dot(xs, val_xs.T)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vS7dHVH0ofgz",
        "colab_type": "text"
      },
      "source": [
        "### Part (c) -- 3 pt\n",
        "\n",
        "Now that we have the distance pairs, we can use the matrix `val_distances`\n",
        "to find the set of neighbours for each point in our validation set and \n",
        "\n",
        "Find the validation accuracy assuming that we use $k = 10$. You may\n",
        "use the below helper function if you want, and the `get_accuracy` helper\n",
        "from the last section.\n",
        "\n",
        "You might also find it helpful to do parts (c) and (d) together."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mjgek572ofg0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def get_nearest_neighbours(i, k=10):\n",
        "  \"\"\"Return the indices of the top k-element of `xs` that are closests to\n",
        "  element `i` of the validation set `val_xs`.\n",
        "  \"\"\"\n",
        "  # sort the element of the training set by distance to the i-th\n",
        "  # element of val_xs\n",
        "  neighbours = sorted(enumerate(val_distances[:, i]),\n",
        "                      key=lambda r: r[1],\n",
        "                      reverse=True)\n",
        "  # obtain the top k closest index and return it\n",
        "  neighbour_indices = [index for (index, dist) in neighbours[:k]]\n",
        "  return neighbour_indices \n",
        "\n",
        "def get_train_ts(indices):\n",
        "  \"\"\"Return the labels of the corresponding elements in the training set `xs`.\n",
        "  Note that `xs` is the first 100,000 elements of `train_xs`, so we can\n",
        "  simply index `train_ts`.\n",
        "  \"\"\"\n",
        "  return train_ts[indices]\n",
        "\n",
        "def get_val_accuracy(k):\n",
        "  y = np.zeros(1000)\n",
        "  for i in range(1000):\n",
        "    neighbourhood = get_nearest_neighbours(i, k)\n",
        "    y[i] = get_train_ts(neighbourhood).mean()\n",
        "  return get_accuracy(y, val_ts[:1000])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E12SlE-H0dy4",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xYi3mAGcofg1",
        "colab_type": "text"
      },
      "source": [
        "### Part (d) -- 2 pts\n",
        "\n",
        "Compute the validation accuracy for $k = 50, 100, and 1000$.\n",
        "Which $k$ provides the best results? In other words, which kNN model would you deploy?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hoSBO1tFofg2",
        "colab_type": "code",
        "cellView": "code",
        "outputId": "082882ba-2ed3-449c-a05b-79c0730bc8c1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        }
      },
      "source": [
        "print(\"validation accuracy for k = 50: \", get_val_accuracy(50))\n",
        "print(\"validation accuracy for k = 100: \", get_val_accuracy(100))\n",
        "print(\"validation accuracy for k = 1000: \", get_val_accuracy(1000))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "validation accuracy for k = 50:  0.696\n",
            "validation accuracy for k = 100:  0.69\n",
            "validation accuracy for k = 1000:  0.674\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "otoO6_x0ofg4",
        "colab_type": "text"
      },
      "source": [
        "### Part (e) -- 4 pt\n",
        "\n",
        "Compute the test accuracy for the $k$ that you chose in the previous part.\n",
        "Use only a sample of 1000 elements from the test set to keep the problem tractable."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "890a7e74-3a2d-4626-fe3f-47fc0c32c1a3",
        "id": "W7RwT0P0nbcH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#preparing test data\n",
        "\n",
        "test_xs = test_norm_xs[:1000]\n",
        "#normalizing the test data\n",
        "norms = np.linalg.norm(test_xs, axis=1)\n",
        "#calculating the distances of each element of the test set and each element of the training set\n",
        "val_distances = np.dot(xs, test_xs.T)\n",
        "\n",
        "def get_test_accuracy(k):\n",
        "  y = np.zeros(1000)\n",
        "  for i in range(1000):\n",
        "    neighbourhood = get_nearest_neighbours(i, k)\n",
        "    y[i] = get_train_ts(neighbourhood).mean()\n",
        "  return get_accuracy(y, test_ts[:1000])\n",
        "print(\"test accuracy for k = 50 on the first 1000 elements of the test set: \", get_test_accuracy(50))\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test accuracy for k = 50 on the first 1000 elements of the test set:  0.757\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
